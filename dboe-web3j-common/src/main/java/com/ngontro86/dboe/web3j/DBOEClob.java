package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOEClob extends Contract {
    public static final String BINARY = "0x61016060405260006080908152603260a052606460c05260c860e0526101f4610100526103e8610120526109c4610140526200004090600a906007620000fe565b506040805160e081018252600081526032602082015260649181019190915260c860608201526101f460808201526103e860a08201526109c460c08201526200008e90600b906007620000fe565b503480156200009c57600080fd5b50620000a833620000ae565b6200016b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000142579160200282015b8281111562000142578251829061ffff169055916020019190600101906200011f565b506200015092915062000154565b5090565b5b8082111562000150576000815560010162000155565b615876806200017b6000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80638da5cb5b11610146578063c56a3cd2116100c3578063e04bd94c11610087578063e04bd94c146105c0578063ee269a98146103a5578063eeab5c18146105c9578063f2fde38b146105dc578063fb261e87146105ef578063ffdba1cd1461060257600080fd5b8063c56a3cd2146104fb578063c62e5c4b1461054c578063cead9eac1461056c578063cf9484ae1461059a578063da5919a6146105ad57600080fd5b8063ad4924da1161010a578063ad4924da14610482578063b1066c2e146104a2578063b1179d0b146104b5578063b3461c87146104c4578063b364bdbf146104d757600080fd5b80638da5cb5b146103ec57806390f69b5e146103fd57806399628003146104105780639baf769d1461044d578063ab27bb031461046057600080fd5b80633ddda236116101d45780636857a96c116101985780636857a96c146103a55780636c4ffcf4146103ad578063715018a6146103c05780637b331119146103c857806384c70ff4146103d957600080fd5b80633ddda23614610350578063449323d814610363578063489a298d1461037657806353a318841461037f578063554635341461039257600080fd5b806318f3565c1161021b57806318f3565c146102f85780631a0f33fb1461030b5780631d0c43b21461031e5780632057bfa01461033e578063221451941461034657600080fd5b80630a66433b146102585780630af9680014610281578063121a634b146102ac578063148c4674146102da578063171a428f146102ef575b600080fd5b61026b610266366004614f78565b610615565b6040516102789190614fe3565b60405180910390f35b600754610294906001600160a01b031681565b6040516001600160a01b039091168152602001610278565b6102cc6102ba366004614ffd565b60036020526000908152604090205481565b604051908152602001610278565b6102ed6102e836600461502b565b610c9f565b005b6102cc61025881565b6102ed610306366004614ffd565b610ce0565b6102ed610319366004615059565b610cf9565b6102cc61032c366004614ffd565b60056020526000908152604090205481565b6102cc601981565b6102cc6203f48081565b61026b61035e3660046150a1565b6113dc565b6102ed6103713660046150be565b611443565b6102cc61271081565b6102ed61038d3660046150db565b611493565b6102cc6103a0366004614ffd565b6116fe565b6102cc600581565b6102ed6103bb3660046150db565b61171f565b6102ed611b41565b6102cc69d3c21bcecceda100000081565b600854610294906001600160a01b031681565b6000546001600160a01b0316610294565b6102ed61040b366004615113565b611b55565b61042361041e366004615135565b611d4d565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610278565b6102ed61045b366004615113565b611dba565b61047361046e366004615172565b611f57565b604051610278939291906151b4565b6102cc610490366004614ffd565b60026020526000908152604090205481565b6102ed6104b03660046150be565b61247b565b6102cc6706f05b59d3b2000081565b600654610294906001600160a01b031681565b6009546104eb90600160a01b900460ff1681565b6040519015158152602001610278565b600a54604080519182526005602083018190526019918301919091526203f4806060830152610258608083015261038460a08301526706f05b59d3b2000060c083015260e082015261010001610278565b6102cc61055a366004614ffd565b60046020526000908152604090205481565b61057f61057a366004614ffd565b6124cb565b60408051938452602084019290925290820152606001610278565b6102ed6105a8366004614ffd565b6124ff565b6102ed6105bb366004615135565b612508565b6102cc61038481565b6102ed6105d73660046150be565b61279d565b6102ed6105ea3660046150be565b6127ed565b6102cc6105fd366004614ffd565b612863565b6102cc6b033b2e3c9fd0803ce800000081565b6006546040516321ccb33760e11b8152600481018490526060916000916001600160a01b0390911690634399666e90602401600060405180830381865afa158015610664573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068c919081019061525e565b905060006001600160a01b0316816000815181106106ac576106ac615304565b60200260200101516001600160a01b0316141580156106f8575060006001600160a01b0316816001815181106106e4576106e4615304565b60200260200101516001600160a01b031614155b61071d5760405162461bcd60e51b81526004016107149061531a565b60405180910390fd5b60008361072b57600b61072e565b600a5b5467ffffffffffffffff811115610747576107476151ed565b604051908082528060200260200182016040528015610770578160200160208202803683370190505b509050428260008151811061078757610787615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f1919061534e565b6040015111610803579150610c999050565b60005b8151811015610c94576000805b60008881526001602090815260408083208a151584528252808320868452909152902054811015610c625760008881526001602090815260408083208a151584528252808320868452909152812080548390811061087357610873615304565b9060005260206000209060040201600101541180156108d8575060008881526001602090815260408083208a15158452825280832086845290915290208054829081106108c2576108c2615304565b9060005260206000209060040201600301544211155b8015610a67575060008881526001602090815260408083208a15158452825280832086845290915290208054610a6791908390811061091957610919615304565b6000918252602082206004909102015487516001600160a01b03909116918a9189919061094857610948615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b2919061534e565b60e0015160008c815260026020908152604080832054600183528184208f1515855283528184208b85529092529091208054879081106109f4576109f4615304565b906000526020600020906004020160010154610a1091906153f4565b610a1a9190615413565b60008c81526001602090815260408083208e1515845282528083208a84529091529020805486908110610a4f57610a4f615304565b90600052602060002090600402016001015489612873565b8015610bf6575060008881526001602090815260408083208a15158452825280832086845290915290208054610bf6919083908110610aa857610aa8615304565b6000918252602082206004909102015487516001600160a01b03909116918a91899190610ad757610ad7615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b41919061534e565b60e0015160008c815260026020908152604080832054600183528184208f1515855283528184208b8552909252909120805487908110610b8357610b83615304565b906000526020600020906004020160010154610b9f91906153f4565b610ba99190615413565b60008c81526001602090815260408083208e1515845282528083208a84529091529020805486908110610bde57610bde615304565b90600052602060002090600402016001015489612fec565b15610c505760008881526001602090815260408083208a1515845282528083208684529091529020805482908110610c3057610c30615304565b90600052602060002090600402016001015482610c4d9190615435565b91505b80610c5a8161544d565b915050610813565b5080838381518110610c7657610c76615304565b60209081029190910101525080610c8c8161544d565b915050610806565b509150505b92915050565b610ca7613a6d565b600980546001600160a81b031916600160a01b931515939093026001600160a01b031916929092176001600160a01b0391909116179055565b610ceb816001613ac7565b610cf6816000613ac7565b50565b69d3c21bcecceda10000008310610d3f5760405162461bcd60e51b815260206004820152600a602482015269109a59c8185b5bdd5b9d60b21b6044820152606401610714565b6006546040516321ccb33760e11b8152600481018790526000916001600160a01b031690634399666e90602401600060405180830381865afa158015610d89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db1919081019061525e565b905060006001600160a01b031681600081518110610dd157610dd1615304565b60200260200101516001600160a01b031614158015610e1d575060006001600160a01b031681600181518110610e0957610e09615304565b60200260200101516001600160a01b031614155b610e395760405162461bcd60e51b81526004016107149061531a565b80600081518110610e4c57610e4c615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb6919061534e565b60400151421115610ed95760405162461bcd60e51b815260040161071490615468565b600084118015610ee95750600083115b8015610f04575084610efc57600b610eff565b600a5b548311155b610f3c5760405162461bcd60e51b815260206004820152600960248201526824ab261027b93232b960b91b6044820152606401610714565b6203f480821115610f7a5760405162461bcd60e51b815260206004820152600860248201526724ab26102b30b61760c11b6044820152606401610714565b6000610f918787610f8c600188615490565b613d1f565b905081600081518110610fa657610fa6615304565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f91906154a7565b61101b906127106153f4565b81106110285750506113d5565b61103c6706f05b59d3b200006127106153f4565b8260008151811061104f5761104f615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b9919061534e565b60e001516110c783886153f4565b6110d19190615413565b101561110e5760405162461bcd60e51b815260206004820152600c60248201526b14db585b1b08185b5bdd5b9d60a21b6044820152606401610714565b6111bc33878460008151811061112657611126615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561116c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611190919061534e565b60e001516127106111a1868b6153f4565b6111ab9190615413565b6111b59190615413565b8886612873565b6111f85760405162461bcd60e51b815260206004820152600d60248201526c2ab739bab333171031b7b6361760991b6044820152606401610714565b6112a633878460008151811061121057611210615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a919061534e565b60e0015161271061128b868b6153f4565b6112959190615413565b61129f9190615413565b8886612fec565b6112e35760405162461bcd60e51b815260206004820152600e60248201526d2ab739bab333171030b63637bb9760911b6044820152606401610714565b8360011480156112f35750600081115b1561130a5761130733888489896000613dad565b94505b84156113d25760008781526001602081815260408084208a15158552909152822091906113379087615490565b81526020019081526020016000206040518060800160405280336001600160a01b0316815260200187815260200142815260200185426113779190615435565b90528154600180820184556000938452602093849020835160049093020180546001600160a01b0319166001600160a01b03909316929092178255928201519281019290925560408101516002830155606001516003909101555b50505b5050505050565b6060816113ea57600b6113ed565b600a5b80548060200260200160405190810160405280929190818152602001828054801561143757602002820191906000526020600020905b815481526020019060010190808311611423575b50505050509050919050565b61144b613a6d565b6001600160a01b0381166114715760405162461bcd60e51b8152600401610714906154c0565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b69d3c21bcecceda100000081106114d95760405162461bcd60e51b815260206004820152600a602482015269109a59c8185b5bdd5b9d60b21b6044820152606401610714565b6114e2336144a2565b61151b5760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b6044820152606401610714565b6006546040516321ccb33760e11b8152600481018590526000916001600160a01b031690634399666e90602401600060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261158d919081019061525e565b905060006001600160a01b0316816000815181106115ad576115ad615304565b60200260200101516001600160a01b0316141580156115f9575060006001600160a01b0316816001815181106115e5576115e5615304565b60200260200101516001600160a01b031614155b6116155760405162461bcd60e51b81526004016107149061531a565b8060008151811061162857611628615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561166e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611692919061534e565b604001514211156116b55760405162461bcd60e51b815260040161071490615468565b60005b836116c457600a6116c7565b600b5b548110156113d5576116dd338684878786613dad565b9250600083116116ec576113d5565b806116f68161544d565b9150506116b8565b600a818154811061170e57600080fd5b600091825260209091200154905081565b6b033b2e3c9fd0803ce800000081106117695760405162461bcd60e51b815260206004820152600c60248201526b109a59c81b9bdd1a5bdb985b60a21b6044820152606401610714565b611772336144a2565b6117ab5760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b6044820152606401610714565b6006546040516321ccb33760e11b8152600481018590526000916001600160a01b031690634399666e90602401600060405180830381865afa1580156117f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261181d919081019061525e565b905060006001600160a01b03168160008151811061183d5761183d615304565b60200260200101516001600160a01b031614158015611889575060006001600160a01b03168160018151811061187557611875615304565b60200260200101516001600160a01b031614155b6118a55760405162461bcd60e51b81526004016107149061531a565b806000815181106118b8576118b8615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611922919061534e565b604001514211156119455760405162461bcd60e51b815260040161071490615468565b60008361195357600a611956565b600b5b8054806020026020016040519081016040528092919081815260200182805480156119a057602002820191906000526020600020905b81548152602001906001019080831161198c575b5050505050905060005b8151811015611b395760006119c087878461452e565b9050836000815181106119d5576119d5615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3f919061534e565b60e0015161271082611af8338b898c888c600081518110611a6257611a62615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acc919061534e565b60e001516127108f611ade91906153f4565b611ae891906153f4565b611af29190615413565b8a613dad565b611b0291906153f4565b611b0c9190615413565b611b169190615413565b945060008511611b265750611b39565b5080611b318161544d565b9150506119aa565b505050505050565b611b49613a6d565b611b53600061456e565b565b611b5d613a6d565b6006546040516321ccb33760e11b8152600481018490526000916001600160a01b031690634399666e90602401600060405180830381865afa158015611ba7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bcf919081019061525e565b905060006001600160a01b031681600081518110611bef57611bef615304565b60200260200101516001600160a01b031614158015611c3b575060006001600160a01b031681600181518110611c2757611c27615304565b60200260200101516001600160a01b031614155b611c785760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21027b83a34b7b760911b6044820152606401610714565b80600081518110611c8b57611c8b615304565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906154a7565b8210611d2c5760405162461bcd60e51b815260206004820152600760248201526609eeccae45ae0f60cb1b6044820152606401610714565b50600091825260026020908152604080842092909255600390529020429055565b60016020528360005260406000206020528260005260406000206020528160005260406000208181548110611d8157600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0390921696509450909250905084565b60065460405163198faa8b60e21b815260048101849052602481018390526000916001600160a01b03169063663eaa2c90604401600060405180830381865afa158015611e0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e33919081019061525e565b905060005b8151811015611f5157611f3f73__$1d9efae94c88074632357998bef858df14$$1d9efae94c88074632357998bef858df14$__637ae2b5c788886000815181106132b0576132b0615304565b60209081029190910101516040516370a0823160e01b81526001600160a01b038f81166004830152909116906370a0823190602401602060405180830381865afa158015613302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332691906154a7565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015613367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338b91906154a7565b8660008151811061339e5761339e615304565b6020908102919091010151600754604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa1580156133fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341e91906154a7565b101580156136ba57506136ba83856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348d91906155ea565b886000815181106134a0576134a0615304565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350991906155ea565b613513919061560d565b61351e90600a615714565b8a8960008151811061353257613532615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359c919061534e565b60e00151604051637ae2b5c760e01b8152600481018d90526024810188905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af41580156135f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361b91906154a7565b613625908d615490565b8b60008151811061363857613638615304565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a191906154a7565b6136ab91906153f4565b6136b59190615413565b614e70565b613a5f565b604051637ae2b5c760e01b8152600481018890526024810182905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af4158015613716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373a91906154a7565b8660018151811061374d5761374d615304565b6020908102919091010151600754604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa1580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cd91906154a7565b10158015613a5f5750613a5f83856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383c91906155ea565b8860008151811061384f5761384f615304565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b891906155ea565b6138c2919061560d565b6138cd90600a615714565b886001815181106138e0576138e0615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394a919061534e565b60e001518960018151811061396157613961615304565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156139a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ca91906154a7565b604051637ae2b5c760e01b8152600481018d90526024810187905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af4158015613a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4591906154a7565b613a4f91906153f4565b613a599190615413565b8b614e70565b9a9950505050505050505050565b6000546001600160a01b03163314611b535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610714565b6000828152600160209081526040808320841515845290915281209082613aef57600b613af2565b600a5b805480602002602001604051908101604052809291908181526020018280548015613b3c57602002820191906000526020600020905b815481526020019060010190808311613b28575b5050505050905060005b81518110156113d557600081815260208490526040812054815b81811015613c9a576000848152602087905260408120805483908110613b8857613b88615304565b906000526020600020906004020160010154118015613bd857506000848152602087905260409020805482908110613bc257613bc2615304565b9060005260206000209060040201600301544211155b15613c88576000848152602087905260409020805482908110613bfd57613bfd615304565b90600052602060002090600402018660008681526020019081526020016000208481548110613c2e57613c2e615304565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015582613c848161544d565b9350505b80613c928161544d565b915050613b60565b505b80821015613d0a576000838152602086905260409020805480613cc157613cc1615723565b60008281526020812060046000199093019283020180546001600160a01b0319168155600181018290556002810182905560030155905581613d028161544d565b925050613c9c565b50508080613d179061544d565b915050613b46565b600082613d2d576001613d31565b6000195b60008581526002602052604090205484613d4c57600b613d4f565b600a5b8481548110613d6057613d60615304565b9060005260206000200154613d7591906153f4565b613d7f9190615739565b600085815260026020526040902054613d9b90612710906153f4565b613da591906157be565b949350505050565b6000808311613ded5760405162461bcd60e51b815260206004820152600c60248201526b12559308139bdd1a5bdb985b60a21b6044820152606401610714565b6000613dfa87868561452e565b905085600081518110613e0f57613e0f615304565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e7891906154a7565b613e84906127106153f4565b8110613e935783915050614498565b60008781526001602090815260408083208815845282528083208684529091528120905b815481101561449157600086118015613ef357506000828281548110613edf57613edf615304565b906000526020600020906004020160010154115b8015613f225750818181548110613f0c57613f0c615304565b9060005260206000209060040201600301544211155b1561447f57600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c788858581548110613f5657613f56615304565b9060005260206000209060040201600101546040518363ffffffff1660e01b8152600401613f8e929190918252602082015260400190565b602060405180830381865af4158015613fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fcf91906154a7565b9050600089600081518110613fe657613fe6615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561402c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614050919061534e565b60e0015161271061406187856153f4565b61406b9190615413565b6140759190615413565b90506140b084848154811061408c5761408c615304565b60009182526020909120600490910201546001600160a01b03168a1583858e612873565b80156140f057506140f08484815481106140cc576140cc615304565b60009182526020909120600490910201546001600160a01b03168a1583858e612fec565b1561447c578184848154811061410857614108615304565b906000526020600020906004020160010160008282546141289190615490565b9091555061413890508289615490565b97508960008151811061414d5761414d615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b7919061534e565b60e001516141c590826153f4565b60008c815260046020526040812080549091906141e3908490615435565b909155505060008b81526005602052604081208054849290614206908490615435565b90915550506007546040805161010081019091528c81526001600160a01b039091169063dc58702d90602081018c6142695787878154811061424a5761424a615304565b60009182526020909120600490910201546001600160a01b031661426b565b8f5b6001600160a01b031681526020018c614284578f6142b1565b87878154811061429657614296615304565b60009182526020909120600490910201546001600160a01b03165b6001600160a01b031681526020018581526020018881526020018d6000815181106142de576142de615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614348919061534e565b60e00151614358906127106153f4565b81526020018c61437f576127106143706005876153f4565b61437a9190615413565b614397565b61271061438d6019876153f4565b6143979190615413565b81526020018c6143be576127106143af6019876153f4565b6143b99190615413565b6143d6565b6127106143cc6005876153f4565b6143d69190615413565b90526040805160e084811b6001600160e01b03191682528351600483015260208401516001600160a01b039081166024840152928401519092166044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c482015291015160e482015261010401600060405180830381600087803b15801561446357600080fd5b505af1158015614477573d6000803e3d6000fd5b505050505b50505b806144898161544d565b915050613eb7565b5084925050505b9695505050505050565b600954600090600160a01b900460ff168015614527575060095460405163df592f7d60e01b81526001600160a01b0384811660048301529091169063df592f7d90602401602060405180830381865afa158015614503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452791906157ff565b1592915050565b60008261453d57600019614540565b60015b6000858152600260205260409020548461455b57600a613d4f565b600b8481548110613d6057613d60615304565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600360205260409020546145da9061025890615435565b4210610cf6576000818152600360205260409020546145fc9061038490615435565b4210158061467f575060405163b863bd3760e01b81526064600482015260059073__$1d9efae94c88074632357998bef858df14$__9063b863bd3790602401602060405180830381865af4158015614658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061467c91906154a7565b11155b15610cf657610cf681614edd565b600081815260056020526040812054156146c657600082815260056020908152604080832054600490925290912054610c999190615413565b6006546040516321ccb33760e11b8152600481018490526000916001600160a01b031690634399666e90602401600060405180830381865afa158015614710573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614738919081019061525e565b905060006001600160a01b03168160008151811061475857614758615304565b60200260200101516001600160a01b0316141580156147a4575060006001600160a01b03168160018151811061479057614790615304565b60200260200101516001600160a01b031614155b6147c05760405162461bcd60e51b81526004016107149061531a565b600042826000815181106147d6576147d6615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561481c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614840919061534e565b6040015161484e9190615490565b90506000811161488a5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610714565b600654825160009182916001600160a01b03909116906348c85c3990869084906148b6576148b6615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156148fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614920919061534e565b60a001516040518263ffffffff1660e01b815260040161494291815260200190565b6040805180830381865afa15801561495e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614982919061581c565b91509150808460008151811061499a5761499a615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156149e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a04919061534e565b60e00151614a1290846153f4565b614a1c9190615413565b60085485519193506000916001600160a01b039091169063d039c9199087908490614a4957614a49615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab3919061534e565b60a0015187600081518110614aca57614aca615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b34919061534e565b610120015188600081518110614b4c57614b4c615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb6919061534e565b606001516040516001600160e01b031960e086901b168152600481019390935290151560248301526044820152606481018690526084810187905260a401602060405180830381865afa158015614c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c3591906154a7565b60085486519192506000916001600160a01b039091169063d039c9199088908490614c6257614c62615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ccc919061534e565b60a0015188600081518110614ce357614ce3615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d4d919061534e565b610120015189600081518110614d6557614d65615304565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dcf919061534e565b608001516040516001600160e01b031960e086901b168152600481019390935290151560248301526044820152606481018790526084810188905260a401602060405180830381865afa158015614e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e4e91906154a7565b905080821115614e6257612fe08183615490565b506001979650505050505050565b600084614e7f85600019615413565b11614e8c57506001613da5565b614e9684866153f4565b614ea284600019615490565b11614eaf57506001613da5565b8183614ebb86886153f4565b614ec59190615435565b10614ed257506001613da5565b506000949350505050565b6000614ee88261468d565b90508015614f66576000828152600260208181526040808420858155600383528185204290819055600584528286208690556004845282862095909555928252915482518681529182015280820192909252517fe1a5e9296271cccb3f7aab3005c935fdbca38ac79f39d14606aaf6744413641a9181900360600190a15b5050565b8015158114610cf657600080fd5b60008060408385031215614f8b57600080fd5b823591506020830135614f9d81614f6a565b809150509250929050565b600081518084526020808501945080840160005b83811015614fd857815187529582019590820190600101614fbc565b509495945050505050565b602081526000614ff66020830184614fa8565b9392505050565b60006020828403121561500f57600080fd5b5035919050565b6001600160a01b0381168114610cf657600080fd5b6000806040838503121561503e57600080fd5b823561504981614f6a565b91506020830135614f9d81615016565b600080600080600060a0868803121561507157600080fd5b85359450602086013561508381614f6a565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156150b357600080fd5b8135614ff681614f6a565b6000602082840312156150d057600080fd5b8135614ff681615016565b6000806000606084860312156150f057600080fd5b83359250602084013561510281614f6a565b929592945050506040919091013590565b6000806040838503121561512657600080fd5b50508035926020909101359150565b6000806000806080858703121561514b57600080fd5b84359350602085013561515d81614f6a565b93969395505050506040820135916060013590565b60008060006060848603121561518757600080fd5b833561519281615016565b92506020840135915060408401356151a981614f6a565b809150509250925092565b6060815260006151c76060830186614fa8565b82810360208401526151d98186614fa8565b905082810360408401526144988185614fa8565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715615227576152276151ed565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615256576152566151ed565b604052919050565b6000602080838503121561527157600080fd5b825167ffffffffffffffff8082111561528957600080fd5b818501915085601f83011261529d57600080fd5b8151818111156152af576152af6151ed565b8060051b91506152c084830161522d565b81815291830184019184810190888411156152da57600080fd5b938501935b83851015612fe057845192506152f483615016565b82825293850193908501906152df565b634e487b7160e01b600052603260045260246000fd5b6020808252600a908201526924ab261027b83a34b7b760b11b604082015260600190565b805161534981614f6a565b919050565b6000610140828403121561536157600080fd5b615369615203565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101006153c181850161533e565b908201526101206153d384820161533e565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561540e5761540e6153de565b500290565b60008261543057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115615448576154486153de565b500190565b6000600019821415615461576154616153de565b5060010190565b6020808252600e908201526d22bc3834b932b21027b83a34b7b760911b604082015260600190565b6000828210156154a2576154a26153de565b500390565b6000602082840312156154b957600080fd5b5051919050565b60208082526009908201526830206164647265737360b81b604082015260600190565b60005b838110156154fe5781810151838201526020016154e6565b83811115611f515750506000910152565b60006020828403121561552157600080fd5b815167ffffffffffffffff8082111561553957600080fd5b818401915084601f83011261554d57600080fd5b81518181111561555f5761555f6151ed565b615572601f8201601f191660200161522d565b915080825285602082850101111561558957600080fd5b610c948160208401602086016154e3565b60208152600082518060208401526155b98160408501602087016154e3565b601f01601f19169190910160400192915050565b6000602082840312156155df57600080fd5b8151614ff681615016565b6000602082840312156155fc57600080fd5b815160ff81168114614ff657600080fd5b600060ff821660ff841680821015615627576156276153de565b90039392505050565b600181815b8085111561566b578160001904821115615651576156516153de565b8085161561565e57918102915b93841c9390800290615635565b509250929050565b60008261568257506001610c99565b8161568f57506000610c99565b81600181146156a557600281146156af576156cb565b6001915050610c99565b60ff8411156156c0576156c06153de565b50506001821b610c99565b5060208310610133831016604e8410600b84101617156156ee575081810a610c99565b6156f88383615630565b806000190482111561570c5761570c6153de565b029392505050565b6000614ff660ff841683615673565b634e487b7160e01b600052603160045260246000fd5b60006001600160ff1b038184138284138082168684048611161561575f5761575f6153de565b600160ff1b600087128281168783058912161561577e5761577e6153de565b6000871292508782058712848416161561579a5761579a6153de565b878505871281841616156157b0576157b06153de565b505050929093029392505050565b600080821280156001600160ff1b03849003851316156157e0576157e06153de565b600160ff1b83900384128116156157f9576157f96153de565b50500190565b60006020828403121561581157600080fd5b8151614ff681614f6a565b6000806040838503121561582f57600080fd5b50508051602090910151909290915056fea2646970667358221220e92e41a4d7ff10d1d971d5fb8314322e1ad6b781ee297564852d3aafc785cf0264736f6c634300080b0033";

    public static final String FUNC_BPS_UNIT = "BPS_UNIT";

    public static final String FUNC_CHANCE = "CHANCE";

    public static final String FUNC_MAKER_FEE_BPS = "MAKER_FEE_BPS";

    public static final String FUNC_MAX_ORDER_VALIDITY_SEC = "MAX_ORDER_VALIDITY_SEC";

    public static final String FUNC_MAX_WAITING_SEC = "MAX_WAITING_SEC";

    public static final String FUNC_MIN_LMT_NOTIONAL = "MIN_LMT_NOTIONAL";

    public static final String FUNC_MIN_WAITING_SEC = "MIN_WAITING_SEC";

    public static final String FUNC_NOTIONAL_LMT = "NOTIONAL_LMT";

    public static final String FUNC_POSITION_LMT = "POSITION_LMT";

    public static final String FUNC_TAKER_FEE_BPS = "TAKER_FEE_BPS";

    public static final String FUNC_ALLQUOTES = "allQuotes";

    public static final String FUNC_ASKSPREADSBPS = "askSpreadsBps";

    public static final String FUNC_BIDSPREADSBPS = "bidSpreadsBps";

    public static final String FUNC_CLEANOB = "cleanOb";

    public static final String FUNC_CLEARINGHOUSE = "clearingHouse";

    public static final String FUNC_ENABLESANCTIONCHECK = "enableSanctionCheck";

    public static final String FUNC_GETFIXEDSPREADS = "getFixedSpreads";

    public static final String FUNC_GETOBSPECS = "getObSpecs";

    public static final String FUNC_GPS = "gps";

    public static final String FUNC_OBDEPTH = "obDepth";

    public static final String FUNC_OPTIONFACTORY = "optionFactory";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REFINFO = "refInfo";

    public static final String FUNC_REFPRICES = "refPrices";

    public static final String FUNC_REFPXTIMES = "refPxTimes";

    public static final String FUNC_REFRESHREFPX = "refreshRefPx";

    public static final String FUNC_REFRESHREFS = "refreshRefs";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETCLEARINGHOUSE = "setClearingHouse";

    public static final String FUNC_SETGPS = "setGPS";

    public static final String FUNC_TOCANCEL = "toCancel";

    public static final String FUNC_TOPRICE = "toPrice";

    public static final String FUNC_TOTRADE = "toTrade";

    public static final String FUNC_TOTRADEBYQTY = "toTradeByQty";

    public static final String FUNC_TRADEDAMOUNT = "tradedAmount";

    public static final String FUNC_TRADEDNOTIONAL = "tradedNotional";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEOPTIONFACTORY = "updateOptionFactory";

    public static final String FUNC_UPDATEREFPRICE = "updateRefPrice";

    public static final String FUNC_UPDATESANCTION = "updateSanction";

    public static final String FUNC_USERQUOTES = "userQuotes";

    public static final Event DBOEREFPRICE_EVENT = new Event("DBOERefPrice", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOEClob(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOEClob(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOEClob(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOEClob(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DBOERefPriceEventResponse> getDBOERefPriceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DBOEREFPRICE_EVENT, transactionReceipt);
        ArrayList<DBOERefPriceEventResponse> responses = new ArrayList<DBOERefPriceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DBOERefPriceEventResponse typedResponse = new DBOERefPriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.optionSeries = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DBOERefPriceEventResponse> dBOERefPriceEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DBOERefPriceEventResponse>() {
            @Override
            public DBOERefPriceEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DBOEREFPRICE_EVENT, log);
                DBOERefPriceEventResponse typedResponse = new DBOERefPriceEventResponse();
                typedResponse.log = log;
                typedResponse.optionSeries = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DBOERefPriceEventResponse> dBOERefPriceEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DBOEREFPRICE_EVENT));
        return dBOERefPriceEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BPS_UNIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BPS_UNIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> CHANCE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAKER_FEE_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAKER_FEE_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORDER_VALIDITY_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORDER_VALIDITY_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_WAITING_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_WAITING_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_LMT_NOTIONAL() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_LMT_NOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_WAITING_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_WAITING_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> NOTIONAL_LMT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOTIONAL_LMT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> POSITION_LMT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POSITION_LMT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> TAKER_FEE_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TAKER_FEE_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>> allQuotes(byte[] param0, Boolean param1, BigInteger param2, BigInteger param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLQUOTES, 
                Arrays.<Type>asList(new Bytes32(param0),
                new Bool(param1),
                new Uint256(param2),
                new Uint256(param3)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> askSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASKSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> bidSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BIDSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cleanOb(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEANOB, 
                Arrays.<Type>asList(new Bytes32(optionSeries)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> clearingHouse() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLEARINGHOUSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> enableSanctionCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENABLESANCTIONCHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getFixedSpreads(Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFIXEDSPREADS, 
                Arrays.<Type>asList(new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getObSpecs() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOBSPECS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> gps() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> obDepth(byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBDEPTH, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> optionFactory() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTIONFACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> refInfo(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFINFO, 
                Arrays.<Type>asList(new Bytes32(optionSeries)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> refPrices(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFPRICES, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> refPxTimes(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFPXTIMES, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> refreshRefPx(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFRESHREFPX, 
                Arrays.<Type>asList(new Bytes32(optionSeries)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refreshRefs(byte[] _und, BigInteger _expiry) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFRESHREFS, 
                Arrays.<Type>asList(new Bytes32(_und),
                new Uint256(_expiry)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setClearingHouse(String _clearingHouseAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCLEARINGHOUSE, 
                Arrays.<Type>asList(new Address(_clearingHouseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGPS(String _gpsAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETGPS, 
                Arrays.<Type>asList(new Address(_gpsAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toCancel(byte[] optionSeries, Boolean buySell, BigInteger priceLevel, BigInteger utcT) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOCANCEL, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(priceLevel),
                new Uint256(utcT)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toPrice(byte[] optionSeries, Boolean buySell, BigInteger amount, BigInteger priceLevel, BigInteger validPeriodSecs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOPRICE, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(amount),
                new Uint256(priceLevel),
                new Uint256(validPeriodSecs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTrade(byte[] optionSeries, Boolean buySell, BigInteger notional) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADE, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(notional)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTradeByQty(byte[] optionSeries, Boolean buySell, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADEBYQTY, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tradedAmount(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADEDAMOUNT, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tradedNotional(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADEDNOTIONAL, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateOptionFactory(String _optionFactoryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEOPTIONFACTORY, 
                Arrays.<Type>asList(new Address(_optionFactoryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRefPrice(byte[] optionSeries, BigInteger px) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEREFPRICE, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Uint256(px)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSanction(Boolean enableOrDisable_, String sanctionAddr_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATESANCTION, 
                Arrays.<Type>asList(new Bool(enableOrDisable_),
                new Address(sanctionAddr_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>> userQuotes(String addr, byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERQUOTES, 
                Arrays.<Type>asList(new Address(addr),
                new Bytes32(optionSeries),
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static DBOEClob load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClob(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOEClob load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClob(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOEClob load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOEClob(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOEClob load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOEClob(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOEClob> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClob.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClob> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClob.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DBOEClob> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClob.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClob> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClob.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DBOERefPriceEventResponse extends BaseEventResponse {
        public byte[] optionSeries;

        public BigInteger price;

        public BigInteger time;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
