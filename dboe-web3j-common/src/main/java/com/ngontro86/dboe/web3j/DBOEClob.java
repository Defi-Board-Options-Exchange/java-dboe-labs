package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOEClob extends Contract {
    public static final String BINARY = "0x61016060405260006080908152606460a05260c860c0526101f460e0526103e8610100526105dc610120526109c4610140526200004190600a906007620000b1565b503480156200004f57600080fd5b506200005b3362000061565b6200011e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620000f5579160200282015b82811115620000f5578251829061ffff16905591602001919060010190620000d2565b506200010392915062000107565b5090565b5b8082111562000103576000815560010162000108565b615f80806200012e6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806384c70ff411610130578063b364bdbf116100b8578063ee269a981161007c578063ee269a98146104f2578063eeab5c18146104fa578063f2fde38b1461050d578063f64352da14610520578063ffdba1cd1461052f57600080fd5b8063b364bdbf14610454578063bd55022a14610478578063c56a3cd214610481578063cead9eac146104b7578063da5919a6146104df57600080fd5b8063ab27bb03116100ff578063ab27bb03146103f4578063ad93a16514610416578063b1066c2e1461041f578063b1179d0b14610432578063b3461c871461044157600080fd5b806384c70ff4146103805780638da5cb5b146103935780638ef3a428146103a457806399628003146103b757600080fd5b806322145194116101b3578063489a298d11610182578063489a298d1461033857806353a31884146103415780636c4ffcf414610354578063715018a6146103675780637b3311191461036f57600080fd5b806322145194146102f5578063295406ce146102ff578063449323d81461031257806346e1c5c21461032557600080fd5b806318f3565c116101fa57806318f3565c146102ac5780631a0f33fb146102bf5780631f2d99be146102d25780631fd2b2bc146102da5780632057bfa0146102ed57600080fd5b80630a66433b1461022c5780630af9680014610255578063148c467414610280578063160336fa14610295575b600080fd5b61023f61023a3660046156e5565b610542565b60405161024c9190615750565b60405180910390f35b600754610268906001600160a01b031681565b6040516001600160a01b03909116815260200161024c565b61029361028e366004615778565b610b52565b005b61029e60045481565b60405190815260200161024c565b6102936102ba3660046157a6565b610b93565b6102936102cd3660046157bf565b610bac565b61023f6111d2565b61023f6102e8366004615807565b61122a565b61029e604b81565b61029e6203f48081565b61029e61030d3660046157a6565b611599565b610293610320366004615849565b6115ba565b6102686103333660046157a6565b61160a565b61029e61271081565b61029361034f366004615866565b611634565b610293610362366004615866565b6118da565b610293611cc2565b61029e69d3c21bcecceda100000081565b600854610268906001600160a01b031681565b6000546001600160a01b0316610268565b6102936103b2366004615778565b611cd6565b6103ca6103c536600461589e565b611e8c565b604080516001600160a01b039095168552602085019390935291830152606082015260800161024c565b610407610402366004615807565b611ef9565b60405161024c939291906158db565b61029e60035481565b61029361042d366004615849565b6123bf565b61029e6706f05b59d3b2000081565b600654610268906001600160a01b031681565b60095461046890600160a01b900460ff1681565b604051901515815260200161024c565b61029e60055481565b600a546040805191825260196020830152604b908201526203f48060608201526706f05b59d3b20000608082015260a00161024c565b6104ca6104c53660046157a6565b61240f565b6040805192835260208301919091520161024c565b6102936104ed36600461589e565b612424565b61029e601981565b610293610508366004615849565b6126b5565b61029361051b366004615849565b612705565b61029e670de0b6b3a764000081565b61029e6b033b2e3c9fd0803ce800000081565b600a5460609060009067ffffffffffffffff8111156105635761056361591e565b60405190808252806020026020018201604052801561058c578160200160208202803683370190505b506006546040516321ccb33760e11b8152600481018790529192506000916001600160a01b0390911690634399666e90602401600060405180830381865afa1580156105dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610604919081019061598f565b9050428160008151811061061a5761061a615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106849190615a5b565b604001511161069557509050610b4c565b60006106a08661277b565b905060005b8351811015610b455760005b60008881526001602090815260408083208a1515845282528083208584529091529020548110156109875760008881526001602090815260408083208a151584528252808320858452909152812080548390811061071157610711615a35565b906000526020600020906004020160010154118015610776575060008881526001602090815260408083208a151584528252808320858452909152902080548290811061076057610760615a35565b9060005260206000209060040201600301544211155b80156108ff575060008881526001602090815260408083208a151584528252808320858452909152902080546108ff9190839081106107b7576107b7615a35565b6000918252602082206004909102015486516001600160a01b03909116918a918891906107e6576107e6615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108509190615a5b565b60e0015160008c81526001602090815260408083208e151584528252808320898452909152902080548891908790811061088c5761088c615a35565b9060005260206000209060040201600101546108a89190615b01565b6108b29190615b20565b60008c81526001602090815260408083208e15158452825280832089845290915290208054869081106108e7576108e7615a35565b90600052602060002090600402016001015488612f35565b156109755760008881526001602090815260408083208a151584528252808320858452909152902080548290811061093957610939615a35565b90600052602060002090600402016001015485838151811061095d5761095d615a35565b602002602001018181516109719190615b42565b9052505b8061097f81615b5a565b9150506106b1565b5060006109a184888461099c61271088615b01565b613f00565b905060005b8151811015610b305760008282815181106109c3576109c3615a35565b602002602001015160200151118015610ad15750610ad18282815181106109ec576109ec615a35565b6020026020010151600001518987600081518110610a0c57610a0c615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190615a5b565b60e0015187868681518110610a8d57610a8d615a35565b602002602001015160200151610aa39190615b01565b610aad9190615b20565b858581518110610abf57610abf615a35565b60200260200101516020015189612f35565b15610b1e57818181518110610ae857610ae8615a35565b602002602001015160200151868481518110610b0657610b06615a35565b60200260200101818151610b1a9190615b42565b9052505b80610b2881615b5a565b9150506109a6565b50508080610b3d90615b5a565b9150506106a5565b5091925050505b92915050565b610b5a614694565b600980546001600160a81b031916600160a01b931515939093026001600160a01b031916929092176001600160a01b0391909116179055565b610b9e8160016146ee565b610ba98160006146ee565b50565b69d3c21bcecceda10000008310610bf75760405162461bcd60e51b815260206004820152600a602482015269109a59c8185b5bdd5b9d60b21b60448201526064015b60405180910390fd5b6006546040516321ccb33760e11b8152600481018790526000916001600160a01b031690634399666e90602401600060405180830381865afa158015610c41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c69919081019061598f565b905060006001600160a01b031681600081518110610c8957610c89615a35565b60200260200101516001600160a01b031614158015610cd5575060006001600160a01b031681600181518110610cc157610cc1615a35565b60200260200101516001600160a01b031614155b610cf15760405162461bcd60e51b8152600401610bee90615b75565b80600081518110610d0457610d04615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e9190615a5b565b60400151421115610d915760405162461bcd60e51b8152600401610bee90615b99565b600084118015610da15750600083115b8015610daf5750600a548311155b610de75760405162461bcd60e51b815260206004820152600960248201526824ab261027b93232b960b91b6044820152606401610bee565b6203f480821115610e255760405162461bcd60e51b815260206004820152600860248201526724ab26102b30b61760c11b6044820152606401610bee565b6000610e308761240f565b50905060008111610e535760405162461bcd60e51b8152600401610bee90615bc1565b6000610e6a8288610e65600189615be1565b6148eb565b905082600081518110610e7f57610e7f615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190615bf8565b610ef490612710615b01565b8110610f02575050506111cb565b610f166706f05b59d3b20000612710615b01565b83600081518110610f2957610f29615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f939190615a5b565b60e00151610fa18389615b01565b610fab9190615b20565b1015610fe85760405162461bcd60e51b815260206004820152600c60248201526b14db585b1b08185b5bdd5b9d60a21b6044820152606401610bee565b61109633888560008151811061100057611000615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190615a5b565b60e0015161271061107b868c615b01565b6110859190615b20565b61108f9190615b20565b8987612f35565b6110d75760405162461bcd60e51b8152602060048201526012602482015271155b9cdd59998b8818985b0b881bdc8814d360721b6044820152606401610bee565b8460011480156110e75750600081115b156110ff576110fc3389858a8a60008761494e565b95505b85156111c75760008881526001602081815260408084208b151585529091528220919061112c9088615be1565b81526020019081526020016000206040518060800160405280336001600160a01b03168152602001888152602001428152602001864261116c9190615b42565b90528154600180820184556000938452602093849020835160049093020180546001600160a01b0319166001600160a01b03909316929092178255928201519281019290925560408101516002830155606001516003909101555b5050505b5050505050565b6060600a80548060200260200160405190810160405280929190818152602001828054801561122057602002820191906000526020600020905b81548152602001906001019080831161120c575b5050505050905090565b6006546040516321ccb33760e11b8152600481018490526060916000916001600160a01b0390911690634399666e90602401600060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112a1919081019061598f565b905042816000815181106112b7576112b7615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113219190615a5b565b6040015111611340575050604080516000815260208101909152611592565b600061134b8561277b565b600a5490915060009067ffffffffffffffff81111561136c5761136c61591e565b604051908082528060200260200182016040528015611395578160200160208202803683370190505b50905060005b600a5481101561158c5760006113b985888461099c61271089615b01565b905060005b815181101561157757896001600160a01b03168282815181106113e3576113e3615a35565b6020026020010151600001516001600160a01b03161480156114225750600082828151811061141457611414615a35565b602002602001015160200151115b8015611523575061152382828151811061143e5761143e615a35565b602002602001015160000151898860008151811061145e5761145e615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190615a5b565b60e00151888686815181106114df576114df615a35565b6020026020010151602001516114f59190615b01565b6114ff9190615b20565b85858151811061151157611511615a35565b6020026020010151602001518a612f35565b156115655781818151811061153a5761153a615a35565b60200260200101516020015184848151811061155857611558615a35565b6020026020010181815250505b8061156f81615b5a565b9150506113be565b5050808061158490615b5a565b91505061139b565b50925050505b9392505050565b600a81815481106115a957600080fd5b600091825260209091200154905081565b6115c2614694565b6001600160a01b0381166115e85760405162461bcd60e51b8152600401610bee90615c11565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6002818154811061161a57600080fd5b6000918252602090912001546001600160a01b0316905081565b69d3c21bcecceda1000000811061167a5760405162461bcd60e51b815260206004820152600a602482015269109a59c8185b5bdd5b9d60b21b6044820152606401610bee565b61168333614f25565b6116bc5760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b6044820152606401610bee565b6006546040516321ccb33760e11b8152600481018590526000916001600160a01b031690634399666e90602401600060405180830381865afa158015611706573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172e919081019061598f565b905060006001600160a01b03168160008151811061174e5761174e615a35565b60200260200101516001600160a01b03161415801561179a575060006001600160a01b03168160018151811061178657611786615a35565b60200260200101516001600160a01b031614155b6117b65760405162461bcd60e51b8152600401610bee90615b75565b806000815181106117c9576117c9615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190615a5b565b604001514211156118565760405162461bcd60e51b8152600401610bee90615b99565b60006118618561240f565b509050600081116118845760405162461bcd60e51b8152600401610bee90615bc1565b60005b600a548110156118d257600061189e838784614fb1565b90506118af3388868989878761494e565b9450600085116118bf57506118d2565b50806118ca81615b5a565b915050611887565b505050505050565b6b033b2e3c9fd0803ce800000081106119245760405162461bcd60e51b815260206004820152600c60248201526b109a59c81b9bdd1a5bdb985b60a21b6044820152606401610bee565b61192d33614f25565b6119665760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b6044820152606401610bee565b6006546040516321ccb33760e11b8152600481018590526000916001600160a01b031690634399666e90602401600060405180830381865afa1580156119b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119d8919081019061598f565b905060006001600160a01b0316816000815181106119f8576119f8615a35565b60200260200101516001600160a01b031614158015611a44575060006001600160a01b031681600181518110611a3057611a30615a35565b60200260200101516001600160a01b031614155b611a605760405162461bcd60e51b8152600401610bee90615b75565b80600081518110611a7357611a73615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190615a5b565b60400151421115611b005760405162461bcd60e51b8152600401610bee90615b99565b6000611b0b8561240f565b50905060008111611b2e5760405162461bcd60e51b8152600401610bee90615bc1565b60005b600a548110156118d2576000611b48838784614fb1565b905083600081518110611b5d57611b5d615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc79190615a5b565b60e0015161271082611c81338b898c888c600081518110611bea57611bea615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c549190615a5b565b60e001516127108f611c669190615b01565b611c709190615b01565b611c7a9190615b20565b8a8a61494e565b611c8b9190615b01565b611c959190615b20565b611c9f9190615b20565b945060008511611caf57506118d2565b5080611cba81615b5a565b915050611b31565b611cca614694565b611cd46000614fd6565b565b611cde614694565b6000805b600254811015611de657826001600160a01b031660028281548110611d0957611d09615a35565b6000918252602090912001546001600160a01b03161415611d3357600191508315611d3357611de6565b83158015611d3e5750815b8015611d575750600254611d5490600190615be1565b81105b15611dd4576002611d69826001615b42565b81548110611d7957611d79615a35565b600091825260209091200154600280546001600160a01b039092169183908110611da557611da5615a35565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611dde81615b5a565b915050611ce2565b50828015611df2575080155b15611e4357600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0384161790555b82158015611e4e5750805b15611e87576002805480611e6457611e64615c31565b600082815260209020810160001990810180546001600160a01b03191690550190555b505050565b60016020528360005260406000206020528260005260406000206020528160005260406000208181548110611ec057600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0390921696509450909250905084565b600a5460609081908190600090815b818110156120745760005b60008981526001602090815260408083208b1515845282528083208584529091529020548110156120615760008981526001602090815260408083208b151584528252808320858452909152902080546001600160a01b038c16919083908110611f7f57611f7f615a35565b60009182526020909120600490910201546001600160a01b0316148015611fec575060008981526001602090815260408083208b1515845282528083208584529091529020805482908110611fd657611fd6615a35565b9060005260206000209060040201600301544211155b801561203c575060008981526001602090815260408083208b151584528252808320858452909152812080548390811061202857612028615a35565b906000526020600020906004020160010154115b1561204f5761204c600185615b42565b93505b8061205981615b5a565b915050611f13565b508061206c81615b5a565b915050611f08565b5060008267ffffffffffffffff8111156120905761209061591e565b6040519080825280602002602001820160405280156120b9578160200160208202803683370190505b50905060008367ffffffffffffffff8111156120d7576120d761591e565b604051908082528060200260200182016040528015612100578160200160208202803683370190505b50905060008467ffffffffffffffff81111561211e5761211e61591e565b604051908082528060200260200182016040528015612147578160200160208202803683370190505b5090506000945060005b848110156123ad5760005b60008c81526001602090815260408083208e15158452825280832085845290915290205481101561239a5760008c81526001602090815260408083208e151584528252808320858452909152902080546001600160a01b038f169190839081106121c8576121c8615a35565b60009182526020909120600490910201546001600160a01b0316148015612235575060008c81526001602090815260408083208e151584528252808320858452909152902080548290811061221f5761221f615a35565b9060005260206000209060040201600301544211155b8015612285575060008c81526001602090815260408083208e151584528252808320858452909152812080548390811061227157612271615a35565b906000526020600020906004020160010154115b1561238857612295826001615b42565b8588815181106122a7576122a7615a35565b60209081029190910181019190915260008d81526001825260408082208e151583528352808220858352909252208054829081106122e7576122e7615a35565b90600052602060002090600402016001015484888151811061230b5761230b615a35565b60209081029190910181019190915260008d81526001825260408082208e1515835283528082208583529092522080548290811061234b5761234b615a35565b90600052602060002090600402016002015483888151811061236f5761236f615a35565b6020908102919091010152612385600188615b42565b96505b8061239281615b5a565b91505061215c565b50806123a581615b5a565b915050612151565b50919a90995090975095505050505050565b6123c7614694565b6001600160a01b0381166123ed5760405162461bcd60e51b8152600401610bee90615c11565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60008061241b8361277b565b93429350915050565b6006546040516321ccb33760e11b8152600481018690526000916001600160a01b031690634399666e90602401600060405180830381865afa15801561246e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612496919081019061598f565b905060006001600160a01b0316816000815181106124b6576124b6615a35565b60200260200101516001600160a01b031614158015612502575060006001600160a01b0316816001815181106124ee576124ee615a35565b60200260200101516001600160a01b031614155b61253f5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21027b83a34b7b760911b6044820152606401610bee565b6000831180156125515750600a548311155b6125935760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908141c9a58d94813195d995b606a1b6044820152606401610bee565b6000858152600160208181526040808420881515855290915282209082906125bb9087615be1565b8152602001908152602001600020905060005b81548110156126ac57336001600160a01b03168282815481106125f3576125f3615a35565b60009182526020909120600490910201546001600160a01b031614801561263c57508382828154811061262857612628615a35565b906000526020600020906004020160020154145b801561266b5750600082828154811061265757612657615a35565b906000526020600020906004020160010154115b1561269a57600082828154811061268457612684615a35565b9060005260206000209060040201600101819055505b806126a481615b5a565b9150506125ce565b50505050505050565b6126bd614694565b6001600160a01b0381166126e35760405162461bcd60e51b8152600401610bee90615c11565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b61270d614694565b6001600160a01b0381166127725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bee565b610ba981614fd6565b6006546040516321ccb33760e11b81526004810183905260009182916001600160a01b0390911690634399666e90602401600060405180830381865afa1580156127c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f1919081019061598f565b905060006001600160a01b03168160008151811061281157612811615a35565b60200260200101516001600160a01b03161415801561285d575060006001600160a01b03168160018151811061284957612849615a35565b60200260200101516001600160a01b031614155b6128795760405162461bcd60e51b8152600401610bee90615b75565b6000428260008151811061288f5761288f615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156128d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f99190615a5b565b604001516129079190615be1565b9050600081116129435760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610bee565b600654825160009182916001600160a01b03909116906348c85c39908690849061296f5761296f615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190615a5b565b60a001516040518263ffffffff1660e01b81526004016129fb91815260200190565b6040805180830381865afa158015612a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3b9190615c47565b915091508084600081518110612a5357612a53615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abd9190615a5b565b60e00151612acb9084615b01565b612ad59190615b20565b60085485519193506000916001600160a01b039091169063d039c9199087908490612b0257612b02615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6c9190615a5b565b60a0015187600081518110612b8357612b83615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bed9190615a5b565b610120015188600081518110612c0557612c05615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f9190615a5b565b606001516040516001600160e01b031960e086901b168152600481019390935290151560248301526044820152606481018690526084810187905260a401602060405180830381865afa158015612cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cee9190615bf8565b60085486519192506000916001600160a01b039091169063d039c9199088908490612d1b57612d1b615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d859190615a5b565b60a0015188600081518110612d9c57612d9c615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e069190615a5b565b610120015189600081518110612e1e57612e1e615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e889190615a5b565b608001516040516001600160e01b031960e086901b168152600481019390935290151560248301526044820152606481018790526084810188905260a401602060405180830381865afa158015612ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f079190615bf8565b905080821115612f2757612f1b8183615be1565b98975050505050505050565b506001979650505050505050565b600754815160009182916001600160a01b03909116906359f7a9609085908490612f6157612f61615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcb9190615a5b565b60c001516040518263ffffffff1660e01b8152600401612fed91815260200190565b602060405180830381865afa15801561300a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302e9190615c6b565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190615c88565b846000815181106130a7576130a7615a35565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131109190615c88565b61311a9190615cab565b61312590600a615db2565b905060008460008151811061313c5761313c615a35565b60209081029190910101516040516370a0823160e01b81526001600160a01b038b81166004830152909116906370a0823190602401602060405180830381865afa15801561318e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b29190615bf8565b90506000856001815181106131c9576131c9615a35565b60209081029190910101516040516370a0823160e01b81526001600160a01b038c81166004830152909116906370a0823190602401602060405180830381865afa15801561321b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323f9190615bf8565b90508815613810576040516370a0823160e01b81526001600160a01b038b8116600483015273__$1d9efae94c88074632357998bef858df14$__91632ce03482918716906370a0823190602401602060405180830381865afa1580156132a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cd9190615bf8565b85896001815181106132e1576132e1615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334b9190615a5b565b60e001518a60018151811061336257613362615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cb9190615bf8565b6133d59087615b01565b6133df9190615b20565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606481018b9052608401602060405180830381865af415801561342f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134539190615dc1565b801561356b5750604051637ae2b5c760e01b8152600481018890526024810182905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af41580156134b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d59190615bf8565b866001815181106134e8576134e8615a35565b6020908102919091010151600754604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190615bf8565b10155b80156138055750600754604051636eb1769f60e11b81526001600160a01b038c81166004830152918216602482015273__$1d9efae94c88074632357998bef858df14$__91632ce03482919087169063dd62ed3e90604401602060405180830381865afa1580156135e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136049190615bf8565b858960018151811061361857613618615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561365e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136829190615a5b565b60e001518a60018151811061369957613699615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137029190615bf8565b604051637ae2b5c760e01b8152600481018e90526024810188905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af4158015613759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377d9190615bf8565b6137879190615b01565b6137919190615b20565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606481018b9052608401602060405180830381865af41580156137e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138059190615dc1565b945050505050613ef7565b6040516370a0823160e01b81526001600160a01b038b8116600483015273__$1d9efae94c88074632357998bef858df14$__91632ce03482918716906370a0823190602401602060405180830381865afa158015613872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138969190615bf8565b85896000815181106138aa576138aa615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156138f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139149190615a5b565b60e001518a60008151811061392b5761392b615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015613970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139949190615bf8565b61399e9088615b01565b6139a89190615b20565b6139b2908d615b42565b8a6000815181106139c5576139c5615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2f9190615a5b565b60e001518b600081518110613a4657613a46615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aaf9190615bf8565b613ab9908e615b01565b613ac39190615b20565b6040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608401602060405180830381865af4158015613b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b359190615dc1565b8015613c4d5750604051637ae2b5c760e01b8152600481018890526024810183905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af4158015613b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb79190615bf8565b86600081518110613bca57613bca615a35565b6020908102919091010151600754604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa158015613c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4a9190615bf8565b10155b8015613ef05750600754604051636eb1769f60e11b81526001600160a01b038c81166004830152918216602482015273__$1d9efae94c88074632357998bef858df14$__91632ce03482919087169063dd62ed3e90604401602060405180830381865afa158015613cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce69190615bf8565b858b8a600081518110613cfb57613cfb615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d659190615a5b565b60e00151604051637ae2b5c760e01b8152600481018e90526024810189905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af4158015613dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de49190615bf8565b613dee908e615be1565b8c600081518110613e0157613e01615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6a9190615bf8565b613e749190615b01565b613e7e9190615b20565b6040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608401602060405180830381865af4158015613ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef09190615dc1565b9450505050505b95945050505050565b60025460609060009067ffffffffffffffff811115613f2157613f2161591e565b604051908082528060200260200182016040528015613f8657816020015b613f73604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b815260200190600190039081613f3f5790505b5090506000613f9487615026565b60025460405163b863bd3760e01b8152600481019190915290915060009073__$1d9efae94c88074632357998bef858df14$__9063b863bd3790602401602060405180830381865af4158015613fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140129190615bf8565b60075489519192506000916001600160a01b03909116906359f7a960908b90849061403f5761403f615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a99190615a5b565b60c001516040518263ffffffff1660e01b81526004016140cb91815260200190565b602060405180830381865afa1580156140e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410c9190615c6b565b9050815b60025461411e908490615b42565b8110156146865760025460009082106141435760025461413e9083615be1565b614145565b815b90506000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ab9190615c88565b8c6000815181106141be576141be615a35565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142279190615c88565b6142319190615cab565b61423c90600a615db2565b6002838154811061424f5761424f615a35565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663e126840a8e60008151811061428e5761428e615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156142d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142f89190615a5b565b60a001516040516001600160e01b031960e084901b16815260048101919091528e151560248201526001600160a01b0388166044820152606401602060405180830381865afa15801561434f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143739190615bf8565b61437d9190615b01565b90506002828154811061439257614392615a35565b60009182526020822001548d516001600160a01b0390911691635ce5b8af918f91906143c0576143c0615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061442a9190615a5b565b60a001518c8f60008151811061444257614442615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ac9190615a5b565b61012001516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260648101899052608401602060405180830381865afa158015614503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145279190615dc1565b614532576000614535565b60015b6145429060ff1682615b01565b905060405180608001604052806002848154811061456257614562615a35565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031681526020018a8e6000815181106145a2576145a2615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156145e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061460c9190615a5b565b60e0015161461c61271086615b01565b6146269190615b01565b6146309190615b20565b81526020014281526020014261012c6146499190615b42565b9052876146568786615be1565b8151811061466657614666615a35565b60200260200101819052505050808061467e90615b5a565b915050614110565b509298975050505050505050565b6000546001600160a01b03163314611cd45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bee565b600082815260016020908152604080832084151584529091528120905b600a548110156148e557600081815260208390526040812054815b8181101561486057600084815260208690526040812080548390811061474e5761474e615a35565b90600052602060002090600402016001015411801561479e5750600084815260208690526040902080548290811061478857614788615a35565b9060005260206000209060040201600301544211155b1561484e5760008481526020869052604090208054829081106147c3576147c3615a35565b906000526020600020906004020185600086815260200190815260200160002084815481106147f4576147f4615a35565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018083015490820155600280830154908201556003918201549101558261484a81615b5a565b9350505b8061485881615b5a565b915050614726565b505b808210156148d057600083815260208590526040902080548061488757614887615c31565b60008281526020812060046000199093019283020180546001600160a01b03191681556001810182905560028101829055600301559055816148c881615b5a565b925050614862565b505080806148dd90615b5a565b91505061470b565b50505050565b6000826148f95760016148fd565b6000195b84600a848154811061491157614911615a35565b90600052602060002001546149269190615b01565b6149309190615dde565b61493c61271086615b01565b6149469190615e63565b949350505050565b600080841161498e5760405162461bcd60e51b815260206004820152600c60248201526b12559308139bdd1a5bdb985b60a21b6044820152606401610bee565b856000815181106149a1576149a1615a35565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0a9190615bf8565b614a1690612710615b01565b8210614a23575082614f1a565b60008781526001602090815260408083208815845282528083208684529091528120905b8154811015614f0657600086118015614a8357506000828281548110614a6f57614a6f615a35565b906000526020600020906004020160010154115b8015614ab25750818181548110614a9c57614a9c615a35565b9060005260206000209060040201600301544211155b15614ef457600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c788858581548110614ae657614ae6615a35565b9060005260206000209060040201600101546040518363ffffffff1660e01b8152600401614b1e929190918252602082015260400190565b602060405180830381865af4158015614b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b5f9190615bf8565b9050600089600081518110614b7657614b76615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614be09190615a5b565b60e00151612710614bf18885615b01565b614bfb9190615b20565b614c059190615b20565b9050614c40848481548110614c1c57614c1c615a35565b60009182526020909120600490910201546001600160a01b03168a1583858e612f35565b15614ef15781848481548110614c5857614c58615a35565b90600052602060002090600402016001016000828254614c789190615be1565b90915550614c8890508289615be1565b97508160046000828254614c9c9190615b42565b925050819055508060036000828254614cb59190615b42565b92505081905550600160056000828254614ccf9190615b42565b90915550506007546040805161010081019091528c81526001600160a01b039091169063dc58702d90602081018c614d3257878781548110614d1357614d13615a35565b60009182526020909120600490910201546001600160a01b0316614d34565b8f5b6001600160a01b031681526020018c614d4d578f614d7a565b878781548110614d5f57614d5f615a35565b60009182526020909120600490910201546001600160a01b03165b6001600160a01b031681526020018581526020018981526020018d600081518110614da757614da7615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e119190615a5b565b60e00151614e2190612710615b01565b81526020018c614e4857612710614e39601987615b01565b614e439190615b20565b614e60565b612710614e56604b87615b01565b614e609190615b20565b81526020018c614e8757612710614e78604b87615b01565b614e829190615b20565b614e9f565b612710614e95601987615b01565b614e9f9190615b20565b8152506040518263ffffffff1660e01b8152600401614ebe9190615ea4565b600060405180830381600087803b158015614ed857600080fd5b505af1158015614eec573d6000803e3d6000fd5b505050505b50505b80614efe81615b5a565b915050614a47565b50614f168989898989898961526a565b9150505b979650505050505050565b600954600090600160a01b900460ff168015614faa575060095460405163df592f7d60e01b81526001600160a01b0384811660048301529091169063df592f7d90602401602060405180830381865afa158015614f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614faa9190615dc1565b1592915050565b600082614fc0576000196148fd565b600184600a848154811061491157614911615a35565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6006548151600091829182916001600160a01b0316906348c85c39908690849061505257615052615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015615098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150bc9190615a5b565b60a001516040518263ffffffff1660e01b81526004016150de91815260200190565b6040805180830381865afa1580156150fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061511e9190615c47565b91509150670de0b6b3a76400008460008151811061513e5761513e615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015615184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151a89190615a5b565b60e001518383670de0b6b3a7640000886000815181106151ca576151ca615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015615210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152349190615a5b565b606001516152429190615b01565b61524c9190615b01565b6152569190615b20565b6152609190615b20565b6149469190615f0b565b60008061527a8787158686613f00565b905060005b81518110156156c9576000861180156152b5575060008282815181106152a7576152a7615a35565b602002602001015160200151115b80156152de57508181815181106152ce576152ce615a35565b6020026020010151606001514211155b156156b757600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c78885858151811061531257615312615a35565b6020026020010151602001516040518363ffffffff1660e01b8152600401615344929190918252602082015260400190565b602060405180830381865af4158015615361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153859190615bf8565b905060008960008151811061539c5761539c615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156153e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154069190615a5b565b60e001516127106154178885615b01565b6154219190615b20565b61542b9190615b20565b905061545884848151811061544257615442615a35565b6020026020010151600001518a1583858e612f35565b156156b4576154678289615be1565b9750816004600082825461547b9190615b42565b9250508190555080600360008282546154949190615b42565b925050819055506001600560008282546154ae9190615b42565b90915550506007546040805161010081019091528c81526001600160a01b039091169063dc58702d90602081018c615503578787815181106154f2576154f2615a35565b602002602001015160000151615505565b8f5b6001600160a01b031681526020018c61551e578f61553d565b87878151811061553057615530615a35565b6020026020010151600001515b6001600160a01b031681526020018581526020018981526020018d60008151811061556a5761556a615a35565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156155b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155d49190615a5b565b60e001516155e490612710615b01565b81526020018c61560b576127106155fc601987615b01565b6156069190615b20565b615623565b612710615619604b87615b01565b6156239190615b20565b81526020018c61564a5761271061563b604b87615b01565b6156459190615b20565b615662565b612710615658601987615b01565b6156629190615b20565b8152506040518263ffffffff1660e01b81526004016156819190615ea4565b600060405180830381600087803b15801561569b57600080fd5b505af11580156156af573d6000803e3d6000fd5b505050505b50505b806156c181615b5a565b91505061527f565b509398975050505050505050565b8015158114610ba957600080fd5b600080604083850312156156f857600080fd5b82359150602083013561570a816156d7565b809150509250929050565b600081518084526020808501945080840160005b8381101561574557815187529582019590820190600101615729565b509495945050505050565b6020815260006115926020830184615715565b6001600160a01b0381168114610ba957600080fd5b6000806040838503121561578b57600080fd5b8235615796816156d7565b9150602083013561570a81615763565b6000602082840312156157b857600080fd5b5035919050565b600080600080600060a086880312156157d757600080fd5b8535945060208601356157e9816156d7565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561581c57600080fd5b833561582781615763565b925060208401359150604084013561583e816156d7565b809150509250925092565b60006020828403121561585b57600080fd5b813561159281615763565b60008060006060848603121561587b57600080fd5b83359250602084013561588d816156d7565b929592945050506040919091013590565b600080600080608085870312156158b457600080fd5b8435935060208501356158c6816156d7565b93969395505050506040820135916060013590565b6060815260006158ee6060830186615715565b82810360208401526159008186615715565b905082810360408401526159148185615715565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156159585761595861591e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156159875761598761591e565b604052919050565b600060208083850312156159a257600080fd5b825167ffffffffffffffff808211156159ba57600080fd5b818501915085601f8301126159ce57600080fd5b8151818111156159e0576159e061591e565b8060051b91506159f184830161595e565b8181529183018401918481019088841115615a0b57600080fd5b938501935b83851015612f1b5784519250615a2583615763565b8282529385019390850190615a10565b634e487b7160e01b600052603260045260246000fd5b8051615a56816156d7565b919050565b60006101408284031215615a6e57600080fd5b615a76615934565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100615ace818501615a4b565b90820152610120615ae0848201615a4b565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615615b1b57615b1b615aeb565b500290565b600082615b3d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115615b5557615b55615aeb565b500190565b6000600019821415615b6e57615b6e615aeb565b5060010190565b6020808252600a908201526924ab261027b83a34b7b760b11b604082015260600190565b6020808252600e908201526d22bc3834b932b21027b83a34b7b760911b604082015260600190565b602080825260069082015265092ac9840a0f60d31b604082015260600190565b600082821015615bf357615bf3615aeb565b500390565b600060208284031215615c0a57600080fd5b5051919050565b602080825260069082015265181030b2323960d11b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b60008060408385031215615c5a57600080fd5b505080516020909101519092909150565b600060208284031215615c7d57600080fd5b815161159281615763565b600060208284031215615c9a57600080fd5b815160ff8116811461159257600080fd5b600060ff821660ff841680821015615cc557615cc5615aeb565b90039392505050565b600181815b80851115615d09578160001904821115615cef57615cef615aeb565b80851615615cfc57918102915b93841c9390800290615cd3565b509250929050565b600082615d2057506001610b4c565b81615d2d57506000610b4c565b8160018114615d435760028114615d4d57615d69565b6001915050610b4c565b60ff841115615d5e57615d5e615aeb565b50506001821b610b4c565b5060208310610133831016604e8410600b8410161715615d8c575081810a610b4c565b615d968383615cce565b8060001904821115615daa57615daa615aeb565b029392505050565b600061159260ff841683615d11565b600060208284031215615dd357600080fd5b8151611592816156d7565b60006001600160ff1b0381841382841380821686840486111615615e0457615e04615aeb565b600160ff1b6000871282811687830589121615615e2357615e23615aeb565b60008712925087820587128484161615615e3f57615e3f615aeb565b87850587128184161615615e5557615e55615aeb565b505050929093029392505050565b600080821280156001600160ff1b0384900385131615615e8557615e85615aeb565b600160ff1b8390038412811615615e9e57615e9e615aeb565b50500190565b60006101008201905082518252602083015160018060a01b0380821660208501528060408601511660408501525050606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60008083128015600160ff1b850184121615615f2957615f29615aeb565b6001600160ff1b0384018313811615615f4457615f44615aeb565b5050039056fea26469706673582212204203ce88ac61cf16d7d994bceb879f8d517d4ba04e99a4acb530332bf75b29a564736f6c634300080b0033";

    public static final String FUNC_BPS_UNIT = "BPS_UNIT";

    public static final String FUNC_MAKER_FEE_BPS = "MAKER_FEE_BPS";

    public static final String FUNC_MAX_ORDER_VALIDITY_SEC = "MAX_ORDER_VALIDITY_SEC";

    public static final String FUNC_MIN_LMT_NOTIONAL = "MIN_LMT_NOTIONAL";

    public static final String FUNC_NOTIONAL_LMT = "NOTIONAL_LMT";

    public static final String FUNC_OPTION_DECIMAL = "OPTION_DECIMAL";

    public static final String FUNC_POSITION_LMT = "POSITION_LMT";

    public static final String FUNC_TAKER_FEE_BPS = "TAKER_FEE_BPS";

    public static final String FUNC_ALLQUOTES = "allQuotes";

    public static final String FUNC_CLEANOB = "cleanOb";

    public static final String FUNC_CLEARINGHOUSE = "clearingHouse";

    public static final String FUNC_DEDICATEDMMS = "dedicatedMMs";

    public static final String FUNC_DMMQUOTES = "dmmQuotes";

    public static final String FUNC_ENABLESANCTIONCHECK = "enableSanctionCheck";

    public static final String FUNC_GETFIXEDSPREADS = "getFixedSpreads";

    public static final String FUNC_GETOBSPECS = "getObSpecs";

    public static final String FUNC_GPS = "gps";

    public static final String FUNC_OBDEPTH = "obDepth";

    public static final String FUNC_OPTIONFACTORY = "optionFactory";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REFINFO = "refInfo";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETCLEARINGHOUSE = "setClearingHouse";

    public static final String FUNC_SETGPS = "setGPS";

    public static final String FUNC_SPREADSBPS = "spreadsBps";

    public static final String FUNC_TOCANCEL = "toCancel";

    public static final String FUNC_TOPRICE = "toPrice";

    public static final String FUNC_TOTRADE = "toTrade";

    public static final String FUNC_TOTRADEBYQTY = "toTradeByQty";

    public static final String FUNC_TRADECOUNT = "tradeCount";

    public static final String FUNC_TRADEDAMOUNT = "tradedAmount";

    public static final String FUNC_TRADEDNOTIONAL = "tradedNotional";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEDMM = "updateDMM";

    public static final String FUNC_UPDATEOPTIONFACTORY = "updateOptionFactory";

    public static final String FUNC_UPDATESANCTION = "updateSanction";

    public static final String FUNC_USERQUOTES = "userQuotes";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOEClob(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOEClob(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOEClob(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOEClob(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BPS_UNIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BPS_UNIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAKER_FEE_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAKER_FEE_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORDER_VALIDITY_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORDER_VALIDITY_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_LMT_NOTIONAL() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_LMT_NOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> NOTIONAL_LMT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOTIONAL_LMT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> OPTION_DECIMAL() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTION_DECIMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> POSITION_LMT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POSITION_LMT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> TAKER_FEE_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TAKER_FEE_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>> allQuotes(byte[] param0, Boolean param1, BigInteger param2, BigInteger param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLQUOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new Bool(param1),
                new Uint256(param2),
                new Uint256(param3)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> cleanOb(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEANOB, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> clearingHouse() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLEARINGHOUSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> dedicatedMMs(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEDICATEDMMS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> dmmQuotes(String addr, byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DMMQUOTES, 
                Arrays.<Type>asList(new Address(addr),
                new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> enableSanctionCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENABLESANCTIONCHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getFixedSpreads() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFIXEDSPREADS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getObSpecs() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOBSPECS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> gps() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> obDepth(byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBDEPTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> optionFactory() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTIONFACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> refInfo(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setClearingHouse(String _clearingHouseAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCLEARINGHOUSE, 
                Arrays.<Type>asList(new Address(_clearingHouseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGPS(String _gpsAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETGPS, 
                Arrays.<Type>asList(new Address(_gpsAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> spreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> toCancel(byte[] optionSeries, Boolean buySell, BigInteger priceLevel, BigInteger utcT) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOCANCEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell),
                new Uint256(priceLevel),
                new Uint256(utcT)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toPrice(byte[] optionSeries, Boolean buySell, BigInteger amount, BigInteger priceLevel, BigInteger validPeriodSecs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell),
                new Uint256(amount),
                new Uint256(priceLevel),
                new Uint256(validPeriodSecs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTrade(byte[] optionSeries, Boolean buySell, BigInteger notional) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell),
                new Uint256(notional)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTradeByQty(byte[] optionSeries, Boolean buySell, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADEBYQTY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tradeCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tradedAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADEDAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tradedNotional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADEDNOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDMM(Boolean add, String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEDMM, 
                Arrays.<Type>asList(new Bool(add),
                new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateOptionFactory(String _optionFactoryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEOPTIONFACTORY, 
                Arrays.<Type>asList(new Address(_optionFactoryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSanction(Boolean enableOrDisable_, String sanctionAddr_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATESANCTION, 
                Arrays.<Type>asList(new Bool(enableOrDisable_),
                new Address(sanctionAddr_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>> userQuotes(String addr, byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERQUOTES, 
                Arrays.<Type>asList(new Address(addr),
                new org.web3j.abi.datatypes.generated.Bytes32(optionSeries), 
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static DBOEClob load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClob(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOEClob load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClob(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOEClob load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOEClob(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOEClob load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOEClob(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOEClob> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClob.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClob> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClob.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DBOEClob> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClob.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClob> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClob.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
