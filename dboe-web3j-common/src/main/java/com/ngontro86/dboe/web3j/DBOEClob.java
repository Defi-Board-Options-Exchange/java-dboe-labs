package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOEClob extends Contract {
    public static final String BINARY = "0x61016060405260006080908152606460a05260c860c0526101f460e0526103e8610100526105dc610120526109c4610140526200004190600b90600762000100565b506040805160e081018252600081526064602082015260c8918101919091526101f460608201526103e860808201526105dc60a08201526109c460c08201526200009090600c90600762000100565b503480156200009e57600080fd5b50620000aa33620000b0565b6200016d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000144579160200282015b8281111562000144578251829061ffff1690559160200191906001019062000121565b506200015292915062000156565b5090565b5b8082111562000152576000815560010162000157565b61535e806200017d6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638da5cb5b11610130578063b364bdbf116100b8578063ee269a981161007c578063ee269a9814610517578063eeab5c181461051f578063f2fde38b14610532578063fb261e8714610545578063ffdba1cd1461055857600080fd5b8063b364bdbf14610479578063bd55022a1461049d578063c56a3cd2146104a6578063cead9eac146104dc578063da5919a61461050457600080fd5b8063ad4924da116100ff578063ad4924da1461041b578063ad93a1651461043b578063b1066c2e14610444578063b1179d0b14610457578063b3461c871461046657600080fd5b80638da5cb5b1461039857806390f69b5e146103a957806399628003146103bc578063ab27bb03146103f957600080fd5b80633ddda236116101b3578063554635341161018257806355463534146103465780636c4ffcf414610359578063715018a61461036c5780637b3311191461037457806384c70ff41461038557600080fd5b80633ddda23614610304578063449323d814610317578063489a298d1461032a57806353a318841461033357600080fd5b8063160336fa116101fa578063160336fa146102c357806318f3565c146102cc5780631a0f33fb146102df5780632057bfa0146102f257806322145194146102fa57600080fd5b80630a66433b1461022c5780630af9680014610255578063121a634b14610280578063148c4674146102ae575b600080fd5b61023f61023a366004614b20565b61056b565b60405161024c9190614b8b565b60405180910390f35b600854610268906001600160a01b031681565b6040516001600160a01b03909116815260200161024c565b6102a061028e366004614ba5565b60036020526000908152604090205481565b60405190815260200161024c565b6102c16102bc366004614bd3565b610bf9565b005b6102a060055481565b6102c16102da366004614ba5565b610c3a565b6102c16102ed366004614c01565b610c53565b6102a0604b81565b6102a06203f48081565b61023f610312366004614c49565b611367565b6102c1610325366004614c66565b6113ce565b6102a061271081565b6102c1610341366004614c83565b61141e565b6102a0610354366004614ba5565b6116d1565b6102c1610367366004614c83565b6116f2565b6102c1611ae7565b6102a069d3c21bcecceda100000081565b600954610268906001600160a01b031681565b6000546001600160a01b0316610268565b6102c16103b7366004614cbb565b611afb565b6103cf6103ca366004614cdd565b611cd2565b604080516001600160a01b039095168552602085019390935291830152606082015260800161024c565b61040c610407366004614d1a565b611d3f565b60405161024c93929190614d5c565b6102a0610429366004614ba5565b60026020526000908152604090205481565b6102a060045481565b6102c1610452366004614c66565b612263565b6102a06706f05b59d3b2000081565b600754610268906001600160a01b031681565b600a5461048d90600160a01b900460ff1681565b604051901515815260200161024c565b6102a060065481565b600b546040805191825260196020830152604b908201526203f48060608201526706f05b59d3b20000608082015260a00161024c565b6104ef6104ea366004614ba5565b6122b3565b6040805192835260208301919091520161024c565b6102c1610512366004614cdd565b6122fc565b6102a0601981565b6102c161052d366004614c66565b61259a565b6102c1610540366004614c66565b6125ea565b6102a0610553366004614ba5565b612660565b6102a06b033b2e3c9fd0803ce800000081565b6007546040516321ccb33760e11b8152600481018490526060916000916001600160a01b0390911690634399666e90602401600060405180830381865afa1580156105ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e29190810190614e10565b905060006001600160a01b03168160008151811061060257610602614eb6565b60200260200101516001600160a01b03161415801561064e575060006001600160a01b03168160018151811061063a5761063a614eb6565b60200260200101516001600160a01b031614155b6106735760405162461bcd60e51b815260040161066a90614ecc565b60405180910390fd5b60008361068157600c610684565b600b5b5467ffffffffffffffff81111561069d5761069d614d9f565b6040519080825280602002602001820160405280156106c6578160200160208202803683370190505b50905042826000815181106106dd576106dd614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190614f00565b6040015111610759579150610bf39050565b6000610764866122b3565b50905060005b8251811015610bec576000805b60008981526001602090815260408083208b151584528252808320868452909152902054811015610bba5760008981526001602090815260408083208b15158452825280832086845290915281208054839081106107d7576107d7614eb6565b90600052602060002090600402016001015411801561083c575060008981526001602090815260408083208b151584528252808320868452909152902080548290811061082657610826614eb6565b9060005260206000209060040201600301544211155b80156109c5575060008981526001602090815260408083208b151584528252808320868452909152902080546109c591908390811061087d5761087d614eb6565b6000918252602082206004909102015488516001600160a01b03909116918b918a91906108ac576108ac614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109169190614f00565b60e0015160008d81526001602090815260408083208f1515845282528083208a8452909152902080548991908790811061095257610952614eb6565b90600052602060002090600402016001015461096e9190614fa6565b6109789190614fc5565b60008d81526001602090815260408083208f1515845282528083208a845290915290208054869081106109ad576109ad614eb6565b9060005260206000209060040201600101548a612670565b8015610b4e575060008981526001602090815260408083208b15158452825280832086845290915290208054610b4e919083908110610a0657610a06614eb6565b6000918252602082206004909102015488516001600160a01b03909116918b918a9190610a3557610a35614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190614f00565b60e0015160008d81526001602090815260408083208f1515845282528083208a84529091529020805489919087908110610adb57610adb614eb6565b906000526020600020906004020160010154610af79190614fa6565b610b019190614fc5565b60008d81526001602090815260408083208f1515845282528083208a84529091529020805486908110610b3657610b36614eb6565b9060005260206000209060040201600101548a612de9565b15610ba85760008981526001602090815260408083208b1515845282528083208684529091529020805482908110610b8857610b88614eb6565b90600052602060002090600402016001015482610ba59190614fe7565b91505b80610bb281614fff565b915050610777565b5080848381518110610bce57610bce614eb6565b60209081029190910101525080610be481614fff565b91505061076a565b5090925050505b92915050565b610c0161386a565b600a80546001600160a81b031916600160a01b931515939093026001600160a01b031916929092176001600160a01b0391909116179055565b610c458160016138c4565b610c508160006138c4565b50565b69d3c21bcecceda10000008310610c995760405162461bcd60e51b815260206004820152600a602482015269109a59c8185b5bdd5b9d60b21b604482015260640161066a565b6007546040516321ccb33760e11b8152600481018790526000916001600160a01b031690634399666e90602401600060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0b9190810190614e10565b905060006001600160a01b031681600081518110610d2b57610d2b614eb6565b60200260200101516001600160a01b031614158015610d77575060006001600160a01b031681600181518110610d6357610d63614eb6565b60200260200101516001600160a01b031614155b610d935760405162461bcd60e51b815260040161066a90614ecc565b80600081518110610da657610da6614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e109190614f00565b60400151421115610e335760405162461bcd60e51b815260040161066a9061501a565b600084118015610e435750600083115b8015610e5e575084610e5657600c610e59565b600b5b548311155b610e965760405162461bcd60e51b815260206004820152600960248201526824ab261027b93232b960b91b604482015260640161066a565b6203f480821115610ed45760405162461bcd60e51b815260206004820152600860248201526724ab26102b30b61760c11b604482015260640161066a565b6000610edf876122b3565b50905060008111610f025760405162461bcd60e51b815260040161066a90615042565b6000610f198288610f14600189615062565b613b1c565b905082600081518110610f2e57610f2e614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190615079565b610fa390612710614fa6565b8110610fb157505050611360565b610fc56706f05b59d3b20000612710614fa6565b83600081518110610fd857610fd8614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190614f00565b60e001516110508389614fa6565b61105a9190614fc5565b10156110975760405162461bcd60e51b815260206004820152600c60248201526b14db585b1b08185b5bdd5b9d60a21b604482015260640161066a565b6111453388856000815181106110af576110af614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111199190614f00565b60e0015161271061112a868c614fa6565b6111349190614fc5565b61113e9190614fc5565b8987612670565b6111815760405162461bcd60e51b815260206004820152600d60248201526c2ab739bab333171031b7b6361760991b604482015260640161066a565b61122f33888560008151811061119957611199614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112039190614f00565b60e00151612710611214868c614fa6565b61121e9190614fc5565b6112289190614fc5565b8987612de9565b61126c5760405162461bcd60e51b815260206004820152600e60248201526d2ab739bab333171030b63637bb9760911b604482015260640161066a565b84600114801561127c5750600081115b15611294576112913389858a8a600087613b8c565b95505b851561135c5760008881526001602081815260408084208b15158552909152822091906112c19088615062565b81526020019081526020016000206040518060800160405280336001600160a01b0316815260200188815260200142815260200186426113019190614fe7565b90528154600180820184556000938452602093849020835160049093020180546001600160a01b0319166001600160a01b03909316929092178255928201519281019290925560408101516002830155606001516003909101555b5050505b5050505050565b60608161137557600c611378565b600b5b8054806020026020016040519081016040528092919081815260200182805480156113c257602002820191906000526020600020905b8154815260200190600101908083116113ae575b50505050509050919050565b6113d661386a565b6001600160a01b0381166113fc5760405162461bcd60e51b815260040161066a90615092565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b69d3c21bcecceda100000081106114645760405162461bcd60e51b815260206004820152600a602482015269109a59c8185b5bdd5b9d60b21b604482015260640161066a565b61146d336141e9565b6114a65760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b604482015260640161066a565b6007546040516321ccb33760e11b8152600481018590526000916001600160a01b031690634399666e90602401600060405180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115189190810190614e10565b905060006001600160a01b03168160008151811061153857611538614eb6565b60200260200101516001600160a01b031614158015611584575060006001600160a01b03168160018151811061157057611570614eb6565b60200260200101516001600160a01b031614155b6115a05760405162461bcd60e51b815260040161066a90614ecc565b806000815181106115b3576115b3614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190614f00565b604001514211156116405760405162461bcd60e51b815260040161066a9061501a565b600061164b856122b3565b5090506000811161166e5760405162461bcd60e51b815260040161066a90615042565b60005b8461167d57600b611680565b600c5b548110156116c9576000611695838784614275565b90506116a633888689898787613b8c565b9450600085116116b657506116c9565b50806116c181614fff565b915050611671565b505050505050565b600b81815481106116e157600080fd5b600091825260209091200154905081565b6b033b2e3c9fd0803ce8000000811061173c5760405162461bcd60e51b815260206004820152600c60248201526b109a59c81b9bdd1a5bdb985b60a21b604482015260640161066a565b611745336141e9565b61177e5760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b604482015260640161066a565b6007546040516321ccb33760e11b8152600481018590526000916001600160a01b031690634399666e90602401600060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117f09190810190614e10565b905060006001600160a01b03168160008151811061181057611810614eb6565b60200260200101516001600160a01b03161415801561185c575060006001600160a01b03168160018151811061184857611848614eb6565b60200260200101516001600160a01b031614155b6118785760405162461bcd60e51b815260040161066a90614ecc565b8060008151811061188b5761188b614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190614f00565b604001514211156119185760405162461bcd60e51b815260040161066a9061501a565b6000611923856122b3565b509050600081116119465760405162461bcd60e51b815260040161066a90615042565b60005b8461195557600b611958565b600c5b548110156116c957600061196d838784614275565b90508360008151811061198257611982614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190614f00565b60e0015161271082611aa6338b898c888c600081518110611a0f57611a0f614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a799190614f00565b60e001516127108f611a8b9190614fa6565b611a959190614fa6565b611a9f9190614fc5565b8a8a613b8c565b611ab09190614fa6565b611aba9190614fc5565b611ac49190614fc5565b945060008511611ad457506116c9565b5080611adf81614fff565b915050611949565b611aef61386a565b611af960006142a7565b565b611b0361386a565b6007546040516321ccb33760e11b8152600481018490526000916001600160a01b031690634399666e90602401600060405180830381865afa158015611b4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b759190810190614e10565b905060006001600160a01b031681600081518110611b9557611b95614eb6565b60200260200101516001600160a01b031614158015611be1575060006001600160a01b031681600181518110611bcd57611bcd614eb6565b60200260200101516001600160a01b031614155b611bfd5760405162461bcd60e51b815260040161066a90614ecc565b80600081518110611c1057611c10614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c799190615079565b8210611cb15760405162461bcd60e51b815260206004820152600760248201526609eeccae45ae0f60cb1b604482015260640161066a565b50600091825260026020908152604080842092909255600390529020429055565b60016020528360005260406000206020528260005260406000206020528160005260406000208181548110611d0657600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0390921696509450909250905084565b606080606060008085611d5357600c611d56565b600b5b805480602002602001604051908101604052809291908181526020018280548015611da057602002820191906000526020600020905b815481526020019060010190808311611d8c575b5050505050905060005b8151811015611f175760005b60008981526001602090815260408083208b151584528252808320858452909152902054811015611f045760008981526001602090815260408083208b151584528252808320858452909152902080546001600160a01b038c16919083908110611e2257611e22614eb6565b60009182526020909120600490910201546001600160a01b0316148015611e8f575060008981526001602090815260408083208b1515845282528083208584529091529020805482908110611e7957611e79614eb6565b9060005260206000209060040201600301544211155b8015611edf575060008981526001602090815260408083208b1515845282528083208584529091528120805483908110611ecb57611ecb614eb6565b906000526020600020906004020160010154115b15611ef257611eef600185614fe7565b93505b80611efc81614fff565b915050611db6565b5080611f0f81614fff565b915050611daa565b5060008267ffffffffffffffff811115611f3357611f33614d9f565b604051908082528060200260200182016040528015611f5c578160200160208202803683370190505b50905060008367ffffffffffffffff811115611f7a57611f7a614d9f565b604051908082528060200260200182016040528015611fa3578160200160208202803683370190505b50905060008467ffffffffffffffff811115611fc157611fc1614d9f565b604051908082528060200260200182016040528015611fea578160200160208202803683370190505b5090506000945060005b84518110156122515760005b60008c81526001602090815260408083208e15158452825280832085845290915290205481101561223e5760008c81526001602090815260408083208e151584528252808320858452909152902080546001600160a01b038f1691908390811061206c5761206c614eb6565b60009182526020909120600490910201546001600160a01b03161480156120d9575060008c81526001602090815260408083208e15158452825280832085845290915290208054829081106120c3576120c3614eb6565b9060005260206000209060040201600301544211155b8015612129575060008c81526001602090815260408083208e151584528252808320858452909152812080548390811061211557612115614eb6565b906000526020600020906004020160010154115b1561222c57612139826001614fe7565b85888151811061214b5761214b614eb6565b60209081029190910181019190915260008d81526001825260408082208e1515835283528082208583529092522080548290811061218b5761218b614eb6565b9060005260206000209060040201600101548488815181106121af576121af614eb6565b60209081029190910181019190915260008d81526001825260408082208e151583528352808220858352909252208054829081106121ef576121ef614eb6565b90600052602060002090600402016002015483888151811061221357612213614eb6565b6020908102919091010152612229600188614fe7565b96505b8061223681614fff565b915050612000565b508061224981614fff565b915050611ff4565b50919a90995090975095505050505050565b61226b61386a565b6001600160a01b0381166122915760405162461bcd60e51b815260040161066a90615092565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260408120548190156122ea5750506000908152600260209081526040808320546003909252909120549091565b6122f3836142f7565b93429350915050565b6007546040516321ccb33760e11b8152600481018690526000916001600160a01b031690634399666e90602401600060405180830381865afa158015612346573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261236e9190810190614e10565b905060006001600160a01b03168160008151811061238e5761238e614eb6565b60200260200101516001600160a01b0316141580156123da575060006001600160a01b0316816001815181106123c6576123c6614eb6565b60200260200101516001600160a01b031614155b6124175760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21027b83a34b7b760911b604482015260640161066a565b60008311801561243657508361242e57600c612431565b600b5b548311155b6124785760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908141c9a58d94813195d995b606a1b604482015260640161066a565b6000858152600160208181526040808420881515855290915282209082906124a09087615062565b8152602001908152602001600020905060005b815481101561259157336001600160a01b03168282815481106124d8576124d8614eb6565b60009182526020909120600490910201546001600160a01b031614801561252157508382828154811061250d5761250d614eb6565b906000526020600020906004020160020154145b80156125505750600082828154811061253c5761253c614eb6565b906000526020600020906004020160010154115b1561257f57600082828154811061256957612569614eb6565b9060005260206000209060040201600101819055505b8061258981614fff565b9150506124b3565b50505050505050565b6125a261386a565b6001600160a01b0381166125c85760405162461bcd60e51b815260040161066a90615092565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6125f261386a565b6001600160a01b0381166126575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066a565b610c50816142a7565b600c81815481106116e157600080fd5b600854815160009182916001600160a01b03909116906359f7a960908590849061269c5761269c614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127069190614f00565b60c001516040518263ffffffff1660e01b815260040161272891815260200190565b602060405180830381865afa158015612745573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276991906150b5565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cf91906150d2565b846000815181106127e2576127e2614eb6565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b91906150d2565b61285591906150f5565b61286090600a6151fc565b905086612bb757808460008151811061287b5761287b614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156128c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e59190614f00565b60e00151856000815181106128fc576128fc614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015612941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129659190615079565b61296f9088614fa6565b6129799190614fc5565b6129839190614fc5565b818560008151811061299757612997614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156129dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a019190614f00565b60e0015186600081518110612a1857612a18614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a819190615079565b87600081518110612a9457612a94614eb6565b60209081029190910101516040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401602060405180830381865afa158015612ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0a9190615079565b612b149190614fa6565b612b1e9190614fc5565b612b289190614fc5565b6040516370a0823160e01b81526001600160a01b038b811660048301528516906370a0823190602401602060405180830381865afa158015612b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b929190615079565b612b9c848a614fc5565b612ba69190614fe7565b612bb09190614fe7565b1015612ddd565b612bc18187614fc5565b8185600181518110612bd557612bd5614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f9190614f00565b60e0015186600181518110612c5657612c56614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbf9190615079565b87600181518110612cd257612cd2614eb6565b60209081029190910101516040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401602060405180830381865afa158015612d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d489190615079565b612d529190614fa6565b612d5c9190614fc5565b612d669190614fc5565b6040516370a0823160e01b81526001600160a01b038b811660048301528516906370a0823190602401602060405180830381865afa158015612dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd09190615079565b612dda9190614fe7565b10155b98975050505050505050565b600854815160009182916001600160a01b03909116906359f7a9609085908490612e1557612e15614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015612e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7f9190614f00565b60c001516040518263ffffffff1660e01b8152600401612ea191815260200190565b602060405180830381865afa158015612ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee291906150b5565b600854604051636eb1769f60e11b81526001600160a01b038a8116600483015291821660248201529192506000919083169063dd62ed3e90604401602060405180830381865afa158015612f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5e9190615079565b9050600084600081518110612f7557612f75614eb6565b60209081029190910101516040516370a0823160e01b81526001600160a01b038b81166004830152909116906370a0823190602401602060405180830381865afa158015612fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612feb9190615079565b905060008560018151811061300257613002614eb6565b60209081029190910101516040516370a0823160e01b81526001600160a01b038c81166004830152909116906370a0823190602401602060405180830381865afa158015613054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130789190615079565b9050886134bc5773__$1d9efae94c88074632357998bef858df14$__637ae2b5c788886000815181106130ad576130ad614eb6565b60209081029190910101516040516370a0823160e01b81526001600160a01b038f81166004830152909116906370a0823190602401602060405180830381865afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190615079565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015613164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131889190615079565b8660008151811061319b5761319b614eb6565b6020908102919091010151600854604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa1580156131f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321b9190615079565b101580156134b757506134b783856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328a91906150d2565b8860008151811061329d5761329d614eb6565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330691906150d2565b61331091906150f5565b61331b90600a6151fc565b8a8960008151811061332f5761332f614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133999190614f00565b60e00151604051637ae2b5c760e01b8152600481018d90526024810188905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af41580156133f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134189190615079565b613422908d615062565b8b60008151811061343557613435614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561347a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349e9190615079565b6134a89190614fa6565b6134b29190614fc5565b614aa5565b61385c565b604051637ae2b5c760e01b8152600481018890526024810182905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af4158015613513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135379190615079565b8660018151811061354a5761354a614eb6565b6020908102919091010151600854604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa1580156135a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ca9190615079565b1015801561385c575061385c83856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363991906150d2565b8860008151811061364c5761364c614eb6565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b591906150d2565b6136bf91906150f5565b6136ca90600a6151fc565b886001815181106136dd576136dd614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137479190614f00565b60e001518960018151811061375e5761375e614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c79190615079565b604051637ae2b5c760e01b8152600481018d90526024810187905273__$1d9efae94c88074632357998bef858df14$__90637ae2b5c790604401602060405180830381865af415801561381e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138429190615079565b61384c9190614fa6565b6138569190614fc5565b8b614aa5565b9a9950505050505050505050565b6000546001600160a01b03163314611af95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066a565b60008281526001602090815260408083208415158452909152812090826138ec57600c6138ef565b600b5b80548060200260200160405190810160405280929190818152602001828054801561393957602002820191906000526020600020905b815481526020019060010190808311613925575b5050505050905060005b815181101561136057600081815260208490526040812054815b81811015613a9757600084815260208790526040812080548390811061398557613985614eb6565b9060005260206000209060040201600101541180156139d5575060008481526020879052604090208054829081106139bf576139bf614eb6565b9060005260206000209060040201600301544211155b15613a855760008481526020879052604090208054829081106139fa576139fa614eb6565b90600052602060002090600402018660008681526020019081526020016000208481548110613a2b57613a2b614eb6565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180830154908201556002808301549082015560039182015491015582613a8181614fff565b9350505b80613a8f81614fff565b91505061395d565b505b80821015613b07576000838152602086905260409020805480613abe57613abe61520b565b60008281526020812060046000199093019283020180546001600160a01b0319168155600181018290556002810182905560030155905581613aff81614fff565b925050613a99565b50508080613b1490614fff565b915050613943565b600082613b2a576001613b2e565b6000195b8484613b3b57600c613b3e565b600b5b8481548110613b4f57613b4f614eb6565b9060005260206000200154613b649190614fa6565b613b6e9190615221565b613b7a61271086614fa6565b613b8491906152a6565b949350505050565b6000808411613bcc5760405162461bcd60e51b815260206004820152600c60248201526b12559308139bdd1a5bdb985b60a21b604482015260640161066a565b85600081518110613bdf57613bdf614eb6565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c489190615079565b613c5490612710614fa6565b8210613c615750826141de565b60008781526001602090815260408083208815845282528083208684529091528120905b81548110156141d857600086118015613cc157506000828281548110613cad57613cad614eb6565b906000526020600020906004020160010154115b8015613cf05750818181548110613cda57613cda614eb6565b9060005260206000209060040201600301544211155b156141c657600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c788858581548110613d2457613d24614eb6565b9060005260206000209060040201600101546040518363ffffffff1660e01b8152600401613d5c929190918252602082015260400190565b602060405180830381865af4158015613d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9d9190615079565b9050600089600081518110613db457613db4614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015613dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1e9190614f00565b60e00151612710613e2f8885614fa6565b613e399190614fc5565b613e439190614fc5565b9050613e7e848481548110613e5a57613e5a614eb6565b60009182526020909120600490910201546001600160a01b03168a1583858e612670565b8015613ebe5750613ebe848481548110613e9a57613e9a614eb6565b60009182526020909120600490910201546001600160a01b03168a1583858e612de9565b156141c35781848481548110613ed657613ed6614eb6565b90600052602060002090600402016001016000828254613ef69190615062565b90915550613f0690508289615062565b97508060046000828254613f1a9190614fe7565b925050819055508160056000828254613f339190614fe7565b92505081905550600160066000828254613f4d9190614fe7565b90915550506008546040805161010081019091528c81526001600160a01b039091169063dc58702d90602081018c613fb057878781548110613f9157613f91614eb6565b60009182526020909120600490910201546001600160a01b0316613fb2565b8f5b6001600160a01b031681526020018c613fcb578f613ff8565b878781548110613fdd57613fdd614eb6565b60009182526020909120600490910201546001600160a01b03165b6001600160a01b031681526020018581526020018981526020018d60008151811061402557614025614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561406b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408f9190614f00565b60e0015161409f90612710614fa6565b81526020018c6140c6576127106140b7601987614fa6565b6140c19190614fc5565b6140de565b6127106140d4604b87614fa6565b6140de9190614fc5565b81526020018c614105576127106140f6604b87614fa6565b6141009190614fc5565b61411d565b612710614113601987614fa6565b61411d9190614fc5565b90526040805160e084811b6001600160e01b03191682528351600483015260208401516001600160a01b039081166024840152928401519092166044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c482015291015160e482015261010401600060405180830381600087803b1580156141aa57600080fd5b505af11580156141be573d6000803e3d6000fd5b505050505b50505b806141d081614fff565b915050613c85565b50849150505b979650505050505050565b600a54600090600160a01b900460ff16801561426e5750600a5460405163df592f7d60e01b81526001600160a01b0384811660048301529091169063df592f7d90602401602060405180830381865afa15801561424a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426e91906152e7565b1592915050565b60008261428457600019614287565b60015b848461429457600b613b3e565b600c8481548110613b4f57613b4f614eb6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6007546040516321ccb33760e11b81526004810183905260009182916001600160a01b0390911690634399666e90602401600060405180830381865afa158015614345573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261436d9190810190614e10565b905060006001600160a01b03168160008151811061438d5761438d614eb6565b60200260200101516001600160a01b0316141580156143d9575060006001600160a01b0316816001815181106143c5576143c5614eb6565b60200260200101516001600160a01b031614155b6143f55760405162461bcd60e51b815260040161066a90614ecc565b6000428260008151811061440b5761440b614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144759190614f00565b604001516144839190615062565b9050600081116144bf5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161066a565b600754825160009182916001600160a01b03909116906348c85c3990869084906144eb576144eb614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145559190614f00565b60a001516040518263ffffffff1660e01b815260040161457791815260200190565b6040805180830381865afa158015614593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b79190615304565b9150915080846000815181106145cf576145cf614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146399190614f00565b60e001516146479084614fa6565b6146519190614fc5565b60095485519193506000916001600160a01b039091169063d039c919908790849061467e5761467e614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156146c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146e89190614f00565b60a00151876000815181106146ff576146ff614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015614745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147699190614f00565b61012001518860008151811061478157614781614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156147c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147eb9190614f00565b606001516040516001600160e01b031960e086901b168152600481019390935290151560248301526044820152606481018690526084810187905260a401602060405180830381865afa158015614846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061486a9190615079565b60095486519192506000916001600160a01b039091169063d039c919908890849061489757614897614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156148dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149019190614f00565b60a001518860008151811061491857614918614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa15801561495e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149829190614f00565b61012001518960008151811061499a5761499a614eb6565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156149e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a049190614f00565b608001516040516001600160e01b031960e086901b168152600481019390935290151560248301526044820152606481018790526084810188905260a401602060405180830381865afa158015614a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a839190615079565b905080821115614a9757612ddd8183615062565b506001979650505050505050565b600084614ab485600019614fc5565b11614ac157506001613b84565b614acb8486614fa6565b614ad784600019615062565b11614ae457506001613b84565b8183614af08688614fa6565b614afa9190614fe7565b10614b0757506001613b84565b506000949350505050565b8015158114610c5057600080fd5b60008060408385031215614b3357600080fd5b823591506020830135614b4581614b12565b809150509250929050565b600081518084526020808501945080840160005b83811015614b8057815187529582019590820190600101614b64565b509495945050505050565b602081526000614b9e6020830184614b50565b9392505050565b600060208284031215614bb757600080fd5b5035919050565b6001600160a01b0381168114610c5057600080fd5b60008060408385031215614be657600080fd5b8235614bf181614b12565b91506020830135614b4581614bbe565b600080600080600060a08688031215614c1957600080fd5b853594506020860135614c2b81614b12565b94979496505050506040830135926060810135926080909101359150565b600060208284031215614c5b57600080fd5b8135614b9e81614b12565b600060208284031215614c7857600080fd5b8135614b9e81614bbe565b600080600060608486031215614c9857600080fd5b833592506020840135614caa81614b12565b929592945050506040919091013590565b60008060408385031215614cce57600080fd5b50508035926020909101359150565b60008060008060808587031215614cf357600080fd5b843593506020850135614d0581614b12565b93969395505050506040820135916060013590565b600080600060608486031215614d2f57600080fd5b8335614d3a81614bbe565b9250602084013591506040840135614d5181614b12565b809150509250925092565b606081526000614d6f6060830186614b50565b8281036020840152614d818186614b50565b90508281036040840152614d958185614b50565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715614dd957614dd9614d9f565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614e0857614e08614d9f565b604052919050565b60006020808385031215614e2357600080fd5b825167ffffffffffffffff80821115614e3b57600080fd5b818501915085601f830112614e4f57600080fd5b815181811115614e6157614e61614d9f565b8060051b9150614e72848301614ddf565b8181529183018401918481019088841115614e8c57600080fd5b938501935b83851015612ddd5784519250614ea683614bbe565b8282529385019390850190614e91565b634e487b7160e01b600052603260045260246000fd5b6020808252600a908201526924ab261027b83a34b7b760b11b604082015260600190565b8051614efb81614b12565b919050565b60006101408284031215614f1357600080fd5b614f1b614db5565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100614f73818501614ef0565b90820152610120614f85848201614ef0565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614fc057614fc0614f90565b500290565b600082614fe257634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115614ffa57614ffa614f90565b500190565b600060001982141561501357615013614f90565b5060010190565b6020808252600e908201526d22bc3834b932b21027b83a34b7b760911b604082015260600190565b602080825260069082015265092ac9840a0f60d31b604082015260600190565b60008282101561507457615074614f90565b500390565b60006020828403121561508b57600080fd5b5051919050565b60208082526009908201526830206164647265737360b81b604082015260600190565b6000602082840312156150c757600080fd5b8151614b9e81614bbe565b6000602082840312156150e457600080fd5b815160ff81168114614b9e57600080fd5b600060ff821660ff84168082101561510f5761510f614f90565b90039392505050565b600181815b8085111561515357816000190482111561513957615139614f90565b8085161561514657918102915b93841c939080029061511d565b509250929050565b60008261516a57506001610bf3565b8161517757506000610bf3565b816001811461518d5760028114615197576151b3565b6001915050610bf3565b60ff8411156151a8576151a8614f90565b50506001821b610bf3565b5060208310610133831016604e8410600b84101617156151d6575081810a610bf3565b6151e08383615118565b80600019048211156151f4576151f4614f90565b029392505050565b6000614b9e60ff84168361515b565b634e487b7160e01b600052603160045260246000fd5b60006001600160ff1b038184138284138082168684048611161561524757615247614f90565b600160ff1b600087128281168783058912161561526657615266614f90565b6000871292508782058712848416161561528257615282614f90565b8785058712818416161561529857615298614f90565b505050929093029392505050565b600080821280156001600160ff1b03849003851316156152c8576152c8614f90565b600160ff1b83900384128116156152e1576152e1614f90565b50500190565b6000602082840312156152f957600080fd5b8151614b9e81614b12565b6000806040838503121561531757600080fd5b50508051602090910151909290915056fea264697066735822122001a26bd38adb4f283422ba6cf4a2b530b3320aa5763fec64c90ad14d633c8da264736f6c634300080b0033";

    public static final String FUNC_BPS_UNIT = "BPS_UNIT";

    public static final String FUNC_MAKER_FEE_BPS = "MAKER_FEE_BPS";

    public static final String FUNC_MAX_ORDER_VALIDITY_SEC = "MAX_ORDER_VALIDITY_SEC";

    public static final String FUNC_MIN_LMT_NOTIONAL = "MIN_LMT_NOTIONAL";

    public static final String FUNC_NOTIONAL_LMT = "NOTIONAL_LMT";

    public static final String FUNC_POSITION_LMT = "POSITION_LMT";

    public static final String FUNC_TAKER_FEE_BPS = "TAKER_FEE_BPS";

    public static final String FUNC_ALLQUOTES = "allQuotes";

    public static final String FUNC_ASKSPREADSBPS = "askSpreadsBps";

    public static final String FUNC_BIDSPREADSBPS = "bidSpreadsBps";

    public static final String FUNC_CLEANOB = "cleanOb";

    public static final String FUNC_CLEARINGHOUSE = "clearingHouse";

    public static final String FUNC_ENABLESANCTIONCHECK = "enableSanctionCheck";

    public static final String FUNC_GETFIXEDSPREADS = "getFixedSpreads";

    public static final String FUNC_GETOBSPECS = "getObSpecs";

    public static final String FUNC_GPS = "gps";

    public static final String FUNC_OBDEPTH = "obDepth";

    public static final String FUNC_OPTIONFACTORY = "optionFactory";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REFINFO = "refInfo";

    public static final String FUNC_REFPRICES = "refPrices";

    public static final String FUNC_REFPXTIMES = "refPxTimes";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETCLEARINGHOUSE = "setClearingHouse";

    public static final String FUNC_SETGPS = "setGPS";

    public static final String FUNC_TOCANCEL = "toCancel";

    public static final String FUNC_TOPRICE = "toPrice";

    public static final String FUNC_TOTRADE = "toTrade";

    public static final String FUNC_TOTRADEBYQTY = "toTradeByQty";

    public static final String FUNC_TRADECOUNT = "tradeCount";

    public static final String FUNC_TRADEDAMOUNT = "tradedAmount";

    public static final String FUNC_TRADEDNOTIONAL = "tradedNotional";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEOPTIONFACTORY = "updateOptionFactory";

    public static final String FUNC_UPDATEREFPRICE = "updateRefPrice";

    public static final String FUNC_UPDATESANCTION = "updateSanction";

    public static final String FUNC_USERQUOTES = "userQuotes";

    public static final Event DBOEREFPRICE_EVENT = new Event("DBOERefPrice", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOEClob(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOEClob(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOEClob(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOEClob(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DBOERefPriceEventResponse> getDBOERefPriceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DBOEREFPRICE_EVENT, transactionReceipt);
        ArrayList<DBOERefPriceEventResponse> responses = new ArrayList<DBOERefPriceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DBOERefPriceEventResponse typedResponse = new DBOERefPriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.optionSeries = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DBOERefPriceEventResponse> dBOERefPriceEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DBOERefPriceEventResponse>() {
            @Override
            public DBOERefPriceEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DBOEREFPRICE_EVENT, log);
                DBOERefPriceEventResponse typedResponse = new DBOERefPriceEventResponse();
                typedResponse.log = log;
                typedResponse.optionSeries = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DBOERefPriceEventResponse> dBOERefPriceEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DBOEREFPRICE_EVENT));
        return dBOERefPriceEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BPS_UNIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BPS_UNIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAKER_FEE_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAKER_FEE_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORDER_VALIDITY_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORDER_VALIDITY_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_LMT_NOTIONAL() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_LMT_NOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> NOTIONAL_LMT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOTIONAL_LMT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> POSITION_LMT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POSITION_LMT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> TAKER_FEE_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TAKER_FEE_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>> allQuotes(byte[] param0, Boolean param1, BigInteger param2, BigInteger param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLQUOTES, 
                Arrays.<Type>asList(new Bytes32(param0),
                new Bool(param1),
                new Uint256(param2),
                new Uint256(param3)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> askSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASKSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> bidSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BIDSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cleanOb(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEANOB, 
                Arrays.<Type>asList(new Bytes32(optionSeries)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> clearingHouse() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLEARINGHOUSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> enableSanctionCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENABLESANCTIONCHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getFixedSpreads(Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFIXEDSPREADS, 
                Arrays.<Type>asList(new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getObSpecs() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOBSPECS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> gps() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> obDepth(byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBDEPTH, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> optionFactory() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTIONFACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> refInfo(byte[] optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFINFO, 
                Arrays.<Type>asList(new Bytes32(optionSeries)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> refPrices(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFPRICES, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> refPxTimes(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFPXTIMES, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setClearingHouse(String _clearingHouseAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCLEARINGHOUSE, 
                Arrays.<Type>asList(new Address(_clearingHouseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGPS(String _gpsAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETGPS, 
                Arrays.<Type>asList(new Address(_gpsAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toCancel(byte[] optionSeries, Boolean buySell, BigInteger priceLevel, BigInteger utcT) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOCANCEL, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(priceLevel),
                new Uint256(utcT)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toPrice(byte[] optionSeries, Boolean buySell, BigInteger amount, BigInteger priceLevel, BigInteger validPeriodSecs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOPRICE, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(amount),
                new Uint256(priceLevel),
                new Uint256(validPeriodSecs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTrade(byte[] optionSeries, Boolean buySell, BigInteger notional) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADE, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(notional)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTradeByQty(byte[] optionSeries, Boolean buySell, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADEBYQTY, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Bool(buySell),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tradeCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tradedAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADEDAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tradedNotional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADEDNOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateOptionFactory(String _optionFactoryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEOPTIONFACTORY, 
                Arrays.<Type>asList(new Address(_optionFactoryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRefPrice(byte[] optionSeries, BigInteger px) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEREFPRICE, 
                Arrays.<Type>asList(new Bytes32(optionSeries),
                new Uint256(px)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSanction(Boolean enableOrDisable_, String sanctionAddr_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATESANCTION, 
                Arrays.<Type>asList(new Bool(enableOrDisable_),
                new Address(sanctionAddr_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>> userQuotes(String addr, byte[] optionSeries, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERQUOTES, 
                Arrays.<Type>asList(new Address(addr),
                new Bytes32(optionSeries),
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static DBOEClob load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClob(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOEClob load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClob(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOEClob load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOEClob(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOEClob load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOEClob(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOEClob> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClob.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClob> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClob.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DBOEClob> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClob.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClob> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClob.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DBOERefPriceEventResponse extends BaseEventResponse {
        public byte[] optionSeries;

        public BigInteger price;

        public BigInteger time;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
