package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOEClearingHouse extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6129ba8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063abe7496311610097578063c5f956af11610066578063c5f956af14610247578063dc58702d1461025a578063eeab5c181461026d578063f2fde38b1461028057600080fd5b8063abe74963146101e5578063b3461c871461020e578063b7f846f914610221578063bd66528a1461023457600080fd5b80637f51bb1f116100d35780637f51bb1f1461017b5780638da5cb5b1461018e5780639e81f96a1461019f578063a2d3f338146101b257600080fd5b806329b8e15c14610105578063532e604c1461011a57806359f7a9601461012d578063715018a614610173575b600080fd5b61011861011336600461230d565b610293565b005b61011861012836600461233d565b61030f565b61015661013b36600461235f565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b610118610625565b610118610189366004612378565b610639565b6000546001600160a01b0316610156565b6101186101ad36600461233d565b610689565b6101d56101c0366004612378565b60046020526000908152604090205460ff1681565b604051901515815260200161016a565b6101566101f336600461235f565b6001602052600090815260409020546001600160a01b031681565b600254610156906001600160a01b031681565b61011861022f366004612378565b610836565b61011861024236600461235f565b610888565b600354610156906001600160a01b031681565b61011861026836600461240d565b610894565b61011861027b366004612378565b61178f565b61011861028e366004612378565b6117df565b61029b611855565b6001600160a01b0381166102e15760405162461bcd60e51b815260206004820152600860248201526724ab261031bab93960c11b60448201526064015b60405180910390fd5b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60025460405163198faa8b60e21b815260048101849052602481018390526000916001600160a01b03169063663eaa2c90604401600060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261038891908101906124b0565b905060008151116103c15760405162461bcd60e51b815260206004820152600360248201526212559360ea1b60448201526064016102d8565b60005b815181101561061f578181815181106103df576103df612562565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190612578565b6104539060066125b1565b61045e90600a6126bc565b82828151811061047057610470612562565b6020908102919091010151604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea91906126cb565b1161060d5781818151811061050157610501612562565b60200260200101516001600160a01b03166352ec8529333085858151811061052b5761052b612562565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105949190612578565b61059f9060096125b1565b6105aa90600a6126bc565b6040518463ffffffff1660e01b81526004016105c8939291906126e4565b6020604051808303816000875af11580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190612718565b505b8061061781612733565b9150506103c4565b50505050565b61062d611855565b61063760006118af565b565b610641611855565b6001600160a01b0381166106675760405162461bcd60e51b81526004016102d89061274e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60025460405163198faa8b60e21b815260048101849052602481018390526000916001600160a01b03169063663eaa2c90604401600060405180830381865afa1580156106da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261070291908101906124b0565b905060005b60028251610715919061276e565b81101561061f5761082473__$1d9efae94c88074632357998bef858df14$__63cfb5192884610745856002612790565b8151811061075557610755612562565b60200260200101516001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561079a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c291908101906127db565b6040518263ffffffff1660e01b81526004016107de919061286f565b602060405180830381865af41580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f91906126cb565b6118ff565b8061082e81612733565b915050610707565b61083e611855565b6001600160a01b0381166108645760405162461bcd60e51b81526004016102d89061274e565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b610891816118ff565b50565b3360009081526004602052604090205460ff166108de5760405162461bcd60e51b81526020600482015260086024820152672737ba1021a627a160c11b60448201526064016102d8565b600081606001511180156108f6575060008160800151115b61092e5760405162461bcd60e51b815260206004820152600960248201526849564c20547261646560b81b60448201526064016102d8565b60025481516040516321ccb33760e11b815260048101919091526000916001600160a01b031690634399666e90602401600060405180830381865afa15801561097b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109a391908101906124b0565b905060006001600160a01b0316816000815181106109c3576109c3612562565b60200260200101516001600160a01b031614158015610a0f575060006001600160a01b0316816001815181106109fb576109fb612562565b60200260200101516001600160a01b031614155b610a495760405162461bcd60e51b815260206004820152600b60248201526a49564c204f53657269657360a81b60448201526064016102d8565b80600081518110610a5c57610a5c612562565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac691906128a2565b60400151421115610b035760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b60448201526064016102d8565b60006001600083600081518110610b1c57610b1c612562565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8691906128a2565b60c0015181526020810191909152604001600020546001600160a01b0316905080610be15760405162461bcd60e51b815260206004820152600b60248201526a2ab739b2ba1027a1bab93960a91b60448201526064016102d8565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190612578565b83600081518110610c5857610c58612562565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190612578565b610ccb9190612932565b610cd690600a6126bc565b905060008460a0015185608001518660600151610cf39190612790565b610cfd919061276e565b9050600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c7876060015187600181518110610d3357610d33612562565b602090810291909101810151908a01516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad91906126cb565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015610dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1291906126cb565b9050600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c7886060015188600081518110610e4857610e48612562565b60209081029190910101516040808c015190516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec291906126cb565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2791906126cb565b9050600086600081518110610f3e57610f3e612562565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906128a2565b60e0015187600081518110610fbf57610fbf612562565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611004573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102891906126cb565b838a606001516110389190612955565b6110429190612790565b61104c919061276e565b905060008760008151811061106357611063612562565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd91906128a2565b60e00151886000815181106110e4576110e4612562565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d91906126cb565b6111579086612790565b611161919061276e565b60c08a01519091501561120057602089015160035460c08b01516001600160a01b03808b16936323b872dd93909291169061119d908b9061276e565b6040518463ffffffff1660e01b81526004016111bb939291906126e4565b6020604051808303816000875af11580156111da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fe9190612718565b505b60e08901511561129c57604089015160035460e08b01516001600160a01b03808b16936323b872dd939092911690611239908b9061276e565b6040518463ffffffff1660e01b8152600401611257939291906126e4565b6020604051808303816000875af1158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190612718565b505b8482111561133757866001600160a01b03166323b872dd8a60400151308989876112c69190612955565b6112d0919061276e565b6040518463ffffffff1660e01b81526004016112ee939291906126e4565b6020604051808303816000875af115801561130d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113319190612718565b506113db565b848210156113db57866001600160a01b031663a9059cbb8a604001518885896113609190612955565b61136a919061276e565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d99190612718565b505b8085111561147657866001600160a01b03166323b872dd8a602001513089858a6114059190612955565b61140f919061276e565b6040518463ffffffff1660e01b815260040161142d939291906126e4565b6020604051808303816000875af115801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190612718565b5061151a565b8085101561151a57866001600160a01b031663a9059cbb8a6020015188888561149f9190612955565b6114a9919061276e565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190612718565b505b83156115a6578760018151811061153357611533612562565b602090810291909101810151908a015160405163079cc67960e41b81526001600160a01b039182166004820152602481018790529116906379cc679090604401600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b505050505b838960600151111561164f57876000815181106115c5576115c5612562565b60200260200101516001600160a01b03166340c10f198a60200151868c606001516115f09190612955565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561163657600080fd5b505af115801561164a573d6000803e3d6000fd5b505050505b82156116db578760008151811061166857611668612562565b60209081029190910101516040808b0151905163079cc67960e41b81526001600160a01b039182166004820152602481018690529116906379cc679090604401600060405180830381600087803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b505050505b828960600151111561178457876001815181106116fa576116fa612562565b60200260200101516001600160a01b03166340c10f198a60400151858c606001516117259190612955565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561176b57600080fd5b505af115801561177f573d6000803e3d6000fd5b505050505b505050505050505050565b611797611855565b6001600160a01b0381166117bd5760405162461bcd60e51b81526004016102d89061274e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6117e7611855565b6001600160a01b03811661184c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d8565b610891816118af565b6000546001600160a01b031633146106375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002546040516330cc359760e01b8152600481018390526001600160a01b03909116906330cc359790602401602060405180830381865afa158015611948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196c9190612718565b6119a65760405162461bcd60e51b815260206004820152600b60248201526a139bdd08195e1c1a5c995960aa1b60448201526064016102d8565b60025460405163f0566e2960e01b8152600481018390526000916001600160a01b03169063f0566e2990602401602060405180830381865afa1580156119f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1491906126cb565b6002546040516321ccb33760e11b8152600481018590529192506000916001600160a01b0390911690634399666e90602401600060405180830381865afa158015611a63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a8b91908101906124b0565b905060006001600160a01b031681600081518110611aab57611aab612562565b60200260200101516001600160a01b031614158015611af7575060006001600160a01b031681600181518110611ae357611ae3612562565b60200260200101516001600160a01b031614155b611b315760405162461bcd60e51b815260206004820152600b60248201526a49564c204f53657269657360a81b60448201526064016102d8565b60006001600083600081518110611b4a57611b4a612562565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb491906128a2565b60c00151815260200190815260200160002060009054906101000a90046001600160a01b03169050600082600181518110611bf157611bf1612562565b60200260200101516001600160a01b031663a8f331a46040518163ffffffff1660e01b815260040161014060405180830381865afa158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b91906128a2565b60e001518484600181518110611c7357611c73612562565b60200260200101516001600160a01b031663974b4a896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc91906126cb565b611ce69190612955565b84600181518110611cf957611cf9612562565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6d91906126cb565b611d779190612790565b8585600081518110611d8b57611d8b612562565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff91906126cb565b611e099190612790565b611e13919061296c565b611e1d919061276e565b9050600083600081518110611e3457611e34612562565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea891906126cb565b1115611fbe5782600081518110611ec157611ec1612562565b60200260200101516001600160a01b03166379cc67903385600081518110611eeb57611eeb612562565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5f91906126cb565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611fa557600080fd5b505af1158015611fb9573d6000803e3d6000fd5b505050505b600083600181518110611fd357611fd3612562565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612023573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204791906126cb565b111561215d578260018151811061206057612060612562565b60200260200101516001600160a01b03166379cc6790338560018151811061208a5761208a612562565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156120da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fe91906126cb565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561214457600080fd5b505af1158015612158573d6000803e3d6000fd5b505050505b80156122e157816001600160a01b031663a9059cbb33846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d59190612578565b866000815181106121e8576121e8612562565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561222d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122519190612578565b61225b9190612932565b61226690600a6126bc565b612270908561276e565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df9190612718565b505b5050505050565b6001600160a01b038116811461089157600080fd5b8035612308816122e8565b919050565b6000806040838503121561232057600080fd5b823591506020830135612332816122e8565b809150509250929050565b6000806040838503121561235057600080fd5b50508035926020909101359150565b60006020828403121561237157600080fd5b5035919050565b60006020828403121561238a57600080fd5b8135612395816122e8565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156123d6576123d661239c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156124055761240561239c565b604052919050565b600061010080838503121561242157600080fd5b6040519081019067ffffffffffffffff821181831017156124445761244461239c565b81604052833581526020840135915061245c826122e8565b81602082015261246e604085016122fd565b6040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c082015260e084013560e0820152809250505092915050565b600060208083850312156124c357600080fd5b825167ffffffffffffffff808211156124db57600080fd5b818501915085601f8301126124ef57600080fd5b8151818111156125015761250161239c565b8060051b91506125128483016123dc565b818152918301840191848101908884111561252c57600080fd5b938501935b838510156125565784519250612546836122e8565b8282529385019390850190612531565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561258a57600080fd5b815160ff8116811461239557600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff038211156125ce576125ce61259b565b019392505050565b600181815b808511156126115781600019048211156125f7576125f761259b565b8085161561260457918102915b93841c93908002906125db565b509250929050565b600082612628575060016126b6565b81612635575060006126b6565b816001811461264b576002811461265557612671565b60019150506126b6565b60ff8411156126665761266661259b565b50506001821b6126b6565b5060208310610133831016604e8410600b8410161715612694575081810a6126b6565b61269e83836125d6565b80600019048211156126b2576126b261259b565b0290505b92915050565b600061239560ff841683612619565b6000602082840312156126dd57600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b8051801515811461230857600080fd5b60006020828403121561272a57600080fd5b61239582612708565b60006000198214156127475761274761259b565b5060010190565b602080825260069082015265181030b2323960d11b604082015260600190565b60008261278b57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156127aa576127aa61259b565b500290565b60005b838110156127ca5781810151838201526020016127b2565b8381111561061f5750506000910152565b6000602082840312156127ed57600080fd5b815167ffffffffffffffff8082111561280557600080fd5b818401915084601f83011261281957600080fd5b81518181111561282b5761282b61239c565b61283e601f8201601f19166020016123dc565b915080825285602082850101111561285557600080fd5b6128668160208401602086016127af565b50949350505050565b602081526000825180602084015261288e8160408501602087016127af565b601f01601f19169190910160400192915050565b600061014082840312156128b557600080fd5b6128bd6123b2565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100612915818501612708565b90820152610120612927848201612708565b908201529392505050565b600060ff821660ff84168082101561294c5761294c61259b565b90039392505050565b6000828210156129675761296761259b565b500390565b6000821982111561297f5761297f61259b565b50019056fea264697066735822122003e0f2c19134b8efa7a5493620254330b6b810beca4550a3831ca8826e9df89864736f6c634300080b0033";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_CLEAR = "clear";

    public static final String FUNC_CLOBADDRESSES = "clobAddresses";

    public static final String FUNC_CURRENCYCONTRACT = "currencyContract";

    public static final String FUNC_CURRENCYCONTRACTMAP = "currencyContractMap";

    public static final String FUNC_ENABLETRADING = "enableTrading";

    public static final String FUNC_OPTIONFACTORY = "optionFactory";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TREASURYADDRESS = "treasuryAddress";

    public static final String FUNC_UPDATECLOBADDRESS = "updateClobAddress";

    public static final String FUNC_UPDATECURRENCYCONTRACTADDRESS = "updateCurrencyContractAddress";

    public static final String FUNC_UPDATEOPTIONFACTORY = "updateOptionFactory";

    public static final String FUNC_UPDATETREASURY = "updateTreasury";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOEClearingHouse(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOEClearingHouse(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOEClearingHouse(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOEClearingHouse(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(byte[] _optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM, 
                Arrays.<Type>asList(new Bytes32(_optionSeries)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claims(byte[] _und, BigInteger exp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIMS, 
                Arrays.<Type>asList(new Bytes32(_und),
                new Uint256(exp)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> clear(DBOEOnchainTrade trade) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEAR, 
                Arrays.<Type>asList(trade), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> clobAddresses(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLOBADDRESSES, 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> currencyContract(byte[] _curr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENCYCONTRACT, 
                Arrays.<Type>asList(new Bytes32(_curr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> currencyContractMap(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENCYCONTRACTMAP, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> enableTrading(byte[] _und, BigInteger _exp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENABLETRADING, 
                Arrays.<Type>asList(new Bytes32(_und),
                new Uint256(_exp)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> optionFactory() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTIONFACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> treasuryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TREASURYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateClobAddress(String _clobAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATECLOBADDRESS, 
                Arrays.<Type>asList(new Address(_clobAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCurrencyContractAddress(byte[] _currency, String _currAddr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATECURRENCYCONTRACTADDRESS, 
                Arrays.<Type>asList(new Bytes32(_currency),
                new Address(_currAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateOptionFactory(String _opFactoryAddr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEOPTIONFACTORY, 
                Arrays.<Type>asList(new Address(_opFactoryAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTreasury(String _treasuryAddr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETREASURY, 
                Arrays.<Type>asList(new Address(_treasuryAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClearingHouse(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClearingHouse(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOEClearingHouse(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOEClearingHouse(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DBOEOnchainTrade extends StaticStruct {
        public byte[] optionSeries;

        public String buyerAddr;

        public String sellerAddr;

        public BigInteger amount;

        public BigInteger price;

        public BigInteger priceScale;

        public BigInteger buyerFee;

        public BigInteger sellerFee;

        public DBOEOnchainTrade(byte[] optionSeries, String buyerAddr, String sellerAddr, BigInteger amount, BigInteger price, BigInteger priceScale, BigInteger buyerFee, BigInteger sellerFee) {
            super(new Bytes32(optionSeries),new Address(buyerAddr),new Address(sellerAddr),new Uint256(amount),new Uint256(price),new Uint256(priceScale),new Uint256(buyerFee),new Uint256(sellerFee));
            this.optionSeries = optionSeries;
            this.buyerAddr = buyerAddr;
            this.sellerAddr = sellerAddr;
            this.amount = amount;
            this.price = price;
            this.priceScale = priceScale;
            this.buyerFee = buyerFee;
            this.sellerFee = sellerFee;
        }

        public DBOEOnchainTrade(Bytes32 optionSeries, Address buyerAddr, Address sellerAddr, Uint256 amount, Uint256 price, Uint256 priceScale, Uint256 buyerFee, Uint256 sellerFee) {
            super(optionSeries,buyerAddr,sellerAddr,amount,price,priceScale,buyerFee,sellerFee);
            this.optionSeries = optionSeries.getValue();
            this.buyerAddr = buyerAddr.getValue();
            this.sellerAddr = sellerAddr.getValue();
            this.amount = amount.getValue();
            this.price = price.getValue();
            this.priceScale = priceScale.getValue();
            this.buyerFee = buyerFee.getValue();
            this.sellerFee = sellerFee.getValue();
        }
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
