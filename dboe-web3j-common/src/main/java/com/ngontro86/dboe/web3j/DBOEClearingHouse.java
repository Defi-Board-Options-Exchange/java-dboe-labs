package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOEClearingHouse extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CLEAR = "clear";

    public static final String FUNC_CURRENCYCONTRACTMAP = "currencyContractMap";

    public static final String FUNC_EXPIREDOPTIONS = "expiredOptions";

    public static final String FUNC_FINALSETTLE = "finalSettle";

    public static final String FUNC_MAX = "max";

    public static final String FUNC_MIN = "min";

    public static final String FUNC_NOOFTRADE = "noOfTrade";

    public static final String FUNC_OPTIONCONTRACTMAP = "optionContractMap";

    public static final String FUNC_OPTIONFSPMAP = "optionFSPMap";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_STRINGTOBYTES32 = "stringToBytes32";

    public static final String FUNC_TOTALTRADENOTIONAL = "totalTradeNotional";

    public static final String FUNC_TRADECLEAREDCACHE = "tradeClearedCache";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TREASURYADDRESS = "treasuryAddress";

    public static final String FUNC_UPDATECURRENCYCONTRACTADDRESS = "updateCurrencyContractAddress";

    public static final String FUNC_UPDATEOPTIONCONTRACTADDRESSES = "updateOptionContractAddresses";

    public static final String FUNC_UPDATETREASURYADDRESS = "updateTreasuryAddress";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event TRADECLEARED_EVENT = new Event("TradeCleared",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOEClearingHouse(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOEClearingHouse(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOEClearingHouse(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOEClearingHouse(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TradeClearedEventResponse> getTradeClearedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRADECLEARED_EVENT, transactionReceipt);
        ArrayList<TradeClearedEventResponse> responses = new ArrayList<TradeClearedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TradeClearedEventResponse typedResponse = new TradeClearedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fillId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TradeClearedEventResponse> tradeClearedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TradeClearedEventResponse>() {
            @Override
            public TradeClearedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRADECLEARED_EVENT, log);
                TradeClearedEventResponse typedResponse = new TradeClearedEventResponse();
                typedResponse.log = log;
                typedResponse.fillId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TradeClearedEventResponse> tradeClearedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADECLEARED_EVENT));
        return tradeClearedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(byte[] _optionSeries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM,
                Arrays.<Type>asList(new Bytes32(_optionSeries)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> clear(List<DBOETrade> trades) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEAR,
                Arrays.<Type>asList(new DynamicArray<DBOETrade>(DBOETrade.class, trades)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> currencyContractMap(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENCYCONTRACTMAP,
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> expiredOptions(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXPIREDOPTIONS,
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> finalSettle(byte[] underlying, BigInteger expiry) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALSETTLE,
                Arrays.<Type>asList(new Bytes32(underlying),
                        new Uint256(expiry)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> max(BigInteger x1, BigInteger x2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX,
                Arrays.<Type>asList(new Uint256(x1),
                        new Uint256(x2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> min(BigInteger x1, BigInteger x2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN,
                Arrays.<Type>asList(new Uint256(x1),
                        new Uint256(x2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> noOfTrade() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOOFTRADE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> optionContractMap(byte[] param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTIONCONTRACTMAP,
                Arrays.<Type>asList(new Bytes32(param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> optionFSPMap(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPTIONFSPMAP,
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> stringToBytes32(String source) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STRINGTOBYTES32,
                Arrays.<Type>asList(new Utf8String(source)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> totalTradeNotional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADENOTIONAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> tradeClearedCache(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADECLEAREDCACHE,
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> treasuryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TREASURYADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCurrencyContractAddress(byte[] currency, String _currencyContractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATECURRENCYCONTRACTADDRESS,
                Arrays.<Type>asList(new Bytes32(currency),
                        new Address(_currencyContractAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateOptionContractAddresses(byte[] optionSeries, String _longOptionContractAddress, String _shortOptionContractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEOPTIONCONTRACTADDRESSES,
                Arrays.<Type>asList(new Bytes32(optionSeries),
                        new Address(_longOptionContractAddress),
                        new Address(_shortOptionContractAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTreasuryAddress(String _treasuryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETREASURYADDRESS,
                Arrays.<Type>asList(new Address(_treasuryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClearingHouse(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOEClearingHouse(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOEClearingHouse(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOEClearingHouse load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOEClearingHouse(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DBOEClearingHouse> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DBOEClearingHouse.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DBOEOrderData extends DynamicStruct {
        public byte[] orderId;

        public String addr;

        public byte[] signature;

        public DBOEOrderData(byte[] orderId, String addr, byte[] signature) {
            super(new Bytes32(orderId), new Address(addr), new DynamicBytes(signature));
            this.orderId = orderId;
            this.addr = addr;
            this.signature = signature;
        }

        public DBOEOrderData(Bytes32 orderId, Address addr, DynamicBytes signature) {
            super(orderId, addr, signature);
            this.orderId = orderId.getValue();
            this.addr = addr.getValue();
            this.signature = signature.getValue();
        }
    }

    public static class DBOETrade extends DynamicStruct {
        public byte[] fillId;

        public byte[] optionSeries;

        public DBOEOrderData buyer;

        public DBOEOrderData seller;

        public BigInteger amount;

        public BigInteger price;

        public BigInteger priceScale;

        public Boolean buyerMaker;

        public BigInteger makerFeeBps;

        public BigInteger makerMinFee;

        public BigInteger takerFeeBps;

        public BigInteger takerMinFee;

        public BigInteger filledUtcTimestamp;

        public BigInteger validPeriodSeconds;

        public DBOETrade(byte[] fillId, byte[] optionSeries, DBOEOrderData buyer, DBOEOrderData seller, BigInteger amount, BigInteger price, BigInteger priceScale, Boolean buyerMaker, BigInteger makerFeeBps, BigInteger makerMinFee, BigInteger takerFeeBps, BigInteger takerMinFee, BigInteger filledUtcTimestamp, BigInteger validPeriodSeconds) {
            super(new Bytes32(fillId), new Bytes32(optionSeries), buyer, seller, new Uint256(amount), new Uint256(price), new Uint256(priceScale), new Bool(buyerMaker), new Uint256(makerFeeBps), new Uint256(makerMinFee), new Uint256(takerFeeBps), new Uint256(takerMinFee), new Uint256(filledUtcTimestamp), new Uint256(validPeriodSeconds));
            this.fillId = fillId;
            this.optionSeries = optionSeries;
            this.buyer = buyer;
            this.seller = seller;
            this.amount = amount;
            this.price = price;
            this.priceScale = priceScale;
            this.buyerMaker = buyerMaker;
            this.makerFeeBps = makerFeeBps;
            this.makerMinFee = makerMinFee;
            this.takerFeeBps = takerFeeBps;
            this.takerMinFee = takerMinFee;
            this.filledUtcTimestamp = filledUtcTimestamp;
            this.validPeriodSeconds = validPeriodSeconds;
        }

        public DBOETrade(Bytes32 fillId, Bytes32 optionSeries, DBOEOrderData buyer, DBOEOrderData seller, Uint256 amount, Uint256 price, Uint256 priceScale, Bool buyerMaker, Uint256 makerFeeBps, Uint256 makerMinFee, Uint256 takerFeeBps, Uint256 takerMinFee, Uint256 filledUtcTimestamp, Uint256 validPeriodSeconds) {
            super(fillId, optionSeries, buyer, seller, amount, price, priceScale, buyerMaker, makerFeeBps, makerMinFee, takerFeeBps, takerMinFee, filledUtcTimestamp, validPeriodSeconds);
            this.fillId = fillId.getValue();
            this.optionSeries = optionSeries.getValue();
            this.buyer = buyer;
            this.seller = seller;
            this.amount = amount.getValue();
            this.price = price.getValue();
            this.priceScale = priceScale.getValue();
            this.buyerMaker = buyerMaker.getValue();
            this.makerFeeBps = makerFeeBps.getValue();
            this.makerMinFee = makerMinFee.getValue();
            this.takerFeeBps = takerFeeBps.getValue();
            this.takerMinFee = takerMinFee.getValue();
            this.filledUtcTimestamp = filledUtcTimestamp.getValue();
            this.validPeriodSeconds = validPeriodSeconds.getValue();
        }
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TradeClearedEventResponse extends BaseEventResponse {
        public byte[] fillId;

        public BigInteger amount;

        public BigInteger price;
    }
}
