package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOESpotMarket extends Contract {
    public static final String BINARY = "0x60c06040523480156200001157600080fd5b50604051620047ae380380620047ae833981016040819052620000349162000440565b6200003f33620003d3565b6001600160a01b038816158015906200006057506001600160a01b03871615155b80156200007557506001600160a01b03861615155b80156200008a57506001600160a01b03811615155b6200009457600080fd5b600780546001600160a01b03808b166001600160a01b031992831617909255600a80548a84169083168117909155600b8054938a16939092169290921790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156200010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001359190620004d6565b60ff16600b60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200018c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b29190620004d6565b60ff161015620001f75760405162461bcd60e51b815260206004820152600c60248201526b49564c20646563696d616c7360a01b604482015260640160405180910390fd5b6001600160a01b038516158015906200021857506001600160a01b03841615155b156200026357600c80546001600160a01b038088166001600160a01b031990921691909117909155600d80546001600160a81b03191691861691909117600160a01b17905562000269565b60028290555b6080839052600a546040805163313ce56760e01b815290516001600160a01b039092169163313ce567916004808201926020929091908290030181865afa158015620002b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002df9190620004d6565b600b60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003599190620004d6565b62000365919062000518565b6200037290600a6200063d565b60a052600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055506200064e95505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200043b57600080fd5b919050565b600080600080600080600080610100898b0312156200045e57600080fd5b620004698962000423565b97506200047960208a0162000423565b96506200048960408a0162000423565b95506200049960608a0162000423565b9450620004a960808a0162000423565b935060a0890151925060c08901519150620004c760e08a0162000423565b90509295985092959890939650565b600060208284031215620004e957600080fd5b815160ff81168114620004fb57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101562000535576200053562000502565b90039392505050565b600181815b808511156200057f57816000190482111562000563576200056362000502565b808516156200057157918102915b93841c939080029062000543565b509250929050565b600082620005985750600162000637565b81620005a75750600062000637565b8160018114620005c05760028114620005cb57620005eb565b600191505062000637565b60ff841115620005df57620005df62000502565b50506001821b62000637565b5060208310610133831016604e8410600b841016171562000610575081810a62000637565b6200061c83836200053e565b806000190482111562000633576200063362000502565b0290505b92915050565b6000620004fb60ff84168362000587565b60805160a0516140f4620006ba60003960008181610393015281816106a001528181610ba801528181610cca01528181610e9401528181610f43015281816125d001528181612c4a0152613831015260008181610418015281816106f301526117d801526140f46000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80636d6a6a4d11610130578063a8c16856116100b8578063c56a3cd21161007c578063c56a3cd2146104f1578063d4a9322314610521578063e933da2a14610534578063f2fde38b14610547578063f3ecbd0f1461055a57600080fd5b8063a8c1685614610489578063a9b50dab146104b7578063bad3bdc8146104c0578063c33f59d3146104d3578063c55dae63146104de57600080fd5b80638d473db2116100ff5780638d473db2146103fa5780638da5cb5b146104025780638f23c6b9146104135780639bb6cd4d1461043a578063a8630a7f1461044357600080fd5b80636d6a6a4d1461038e578063715018a6146103b557806379502c55146103bd578063809bec11146103d057600080fd5b806346e1c5c2116101be578063582aa40d11610182578063582aa40d1461031157806359502bac1461033557806360b6fa0b1461034857806362d877b114610368578063698e2c541461037b57600080fd5b806346e1c5c2146102c6578063489a298d146102d95780634cc2e785146102e257806356455986146102f557806356cbd6d81461030857600080fd5b80632214519411610205578063221451941461029a5780632c6e9cd6146102a4578063315680a4146102ac5780633580b7a1146102b45780633bb76ae2146102bd57600080fd5b806252c68a14610236578063016786fa146102665780631396827b14610270578063217a4b7014610287575b600080fd5b600d54610249906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61026e61057c565b005b61027960025481565b60405190815260200161025d565b600a54610249906001600160a01b031681565b61027962093a8081565b610279600581565b610279600f81565b61027960065481565b61027960045481565b6102496102d4366004613aef565b610592565b61027961271081565b61026e6102f0366004613b2b565b6105bc565b600c54610249906001600160a01b031681565b61027960055481565b600d5461032590600160a01b900460ff1681565b604051901515815260200161025d565b61026e610343366004613b81565b610900565b61035b610356366004613bb6565b610a18565b60405161025d9190613c15565b61026e610376366004613c28565b611044565b61026e610389366004613c28565b611175565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b61026e6112ed565b600754610249906001600160a01b031681565b6103d86112ff565b604080519415158552602085019390935291830152606082015260800161025d565b610279611577565b6000546001600160a01b0316610249565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b61027961070881565b610456610451366004613b81565b61158a565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00161025d565b61049c610497366004613aef565b6115f1565b6040805193845260208401929092529082015260600161025d565b6102796105dc81565b61026e6104ce366004613c6a565b611624565b6102796305f5e10081565b600b54610249906001600160a01b031681565b6104f96116cc565b604080519586526020860194909452928401919091526060830152608082015260a00161025d565b61027961052f366004613aef565b6117fd565b61026e610542366004613cdf565b61181e565b61026e610555366004613cdf565b6118dd565b61056d610568366004613cfc565b611956565b60405161025d93929190613d35565b6105866001611dd2565b6105906000611dd2565b565b600881815481106105a257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000841180156105cc5750600083115b80156105da57506009548311155b6106175760405162461bcd60e51b815260206004820152600960248201526824ab261027b93232b960b91b60448201526064015b60405180910390fd5b62093a808211156106555760405162461bcd60e51b815260206004820152600860248201526724ab26102b30b61760c11b604482015260640161060e565b6000806106606112ff565b505091509150816106835760405162461bcd60e51b815260040161060e90613d78565b600061069a828961069560018a613db3565b611fe0565b905060007f00000000000000000000000000000000000000000000000000000000000000006305f5e1006127106106d1858c613dca565b6106db9190613dff565b6106e59190613dff565b6106ef9190613dff565b90507f00000000000000000000000000000000000000000000000000000000000000008110156107505760405162461bcd60e51b815260206004820152600c60248201526b14db585b1b08185b5bdd5b9d60a21b604482015260640161060e565b61075c338a838b612043565b61079b5760405162461bcd60e51b815260206004820152601060248201526f2ab739bab33317103130b630b731b29760811b604482015260640161060e565b6107a7338a838b61213b565b6107e45760405162461bcd60e51b815260206004820152600e60248201526d2ab739bab333171030b63637bb9760911b604482015260640161060e565b8660011480156107f45750600082115b1561081457610802836121b2565b61081133338b8b600087612459565b97505b87156108f557881515600090815260016020819052604082209190610839908a613db3565b81526020019081526020016000206040518060a00160405280336001600160a01b03168152602001876001600160a01b031681526020018a815260200142815260200188426108889190613e13565b90528154600181810184556000938452602093849020835160059093020180546001600160a01b039384166001600160a01b031991821617825594840151918101805492909316919094161790556040810151600283015560608101516003830155608001516004909101555b505050505050505050565b821515600090815260016020819052604082209082906109209086613db3565b8152602001908152602001600020905060005b8154811015610a1157336001600160a01b031682828154811061095857610958613e2b565b60009182526020909120600590910201546001600160a01b03161480156109a157508282828154811061098d5761098d613e2b565b906000526020600020906005020160030154145b80156109d0575060008282815481106109bc576109bc613e2b565b906000526020600020906005020160020154115b156109ff5760008282815481106109e9576109e9613e2b565b9060005260206000209060050201600201819055505b80610a0981613e41565b915050610933565b5050505050565b60095460609060009067ffffffffffffffff811115610a3957610a39613e5c565b604051908082528060200260200182016040528015610a62578160200160208202803683370190505b5090506000610a6f6112ff565b505091505060005b825181101561103b5760005b8515156000908152600160209081526040808320858452909152902054811015610df85785151560009081526001602090815260408083208584529091528120805483908110610ad557610ad5613e2b565b906000526020600020906005020160020154118015610b33575085151560009081526001602090815260408083208584529091529020805482908110610b1d57610b1d613e2b565b9060005260206000209060050201600401544211155b8015610c555750851515600090815260016020908152604080832085845290915290208054610c55919083908110610b6d57610b6d613e2b565b600091825260208083206005909202909101548915158352600182526040808420878552909252912080546001600160a01b039092169189917f0000000000000000000000000000000000000000000000000000000000000000916305f5e10091899188908110610be057610be0613e2b565b906000526020600020906005020160020154610bfc9190613dca565b610c069190613dff565b610c109190613dff565b89151560009081526001602090815260408083208984529091529020805486908110610c3e57610c3e613e2b565b906000526020600020906005020160020154612043565b8015610d775750851515600090815260016020908152604080832085845290915290208054610d77919083908110610c8f57610c8f613e2b565b600091825260208083206005909202909101548915158352600182526040808420878552909252912080546001600160a01b039092169189917f0000000000000000000000000000000000000000000000000000000000000000916305f5e10091899188908110610d0257610d02613e2b565b906000526020600020906005020160020154610d1e9190613dca565b610d289190613dff565b610d329190613dff565b89151560009081526001602090815260408083208984529091529020805486908110610d6057610d60613e2b565b90600052602060002090600502016002015461213b565b15610de65785151560009081526001602090815260408083208584529091529020805482908110610daa57610daa613e2b565b906000526020600020906005020160020154848381518110610dce57610dce613e2b565b60200260200101818151610de29190613e13565b9052505b80610df081613e41565b915050610a83565b506000610e118683610e0c61271087613dca565b612af6565b905060005b8151811015611026576000828281518110610e3357610e33613e2b565b602002602001015160400151118015610e695750818181518110610e5957610e59613e2b565b6020026020010151608001514211155b8015610f185750610f18828281518110610e8557610e85613e2b565b602002602001015160000151887f00000000000000000000000000000000000000000000000000000000000000006305f5e10088878781518110610ecb57610ecb613e2b565b602002602001015160400151610ee19190613dca565b610eeb9190613dff565b610ef59190613dff565b858581518110610f0757610f07613e2b565b602002602001015160400151612043565b8015610fc75750610fc7828281518110610f3457610f34613e2b565b602002602001015160000151887f00000000000000000000000000000000000000000000000000000000000000006305f5e10088878781518110610f7a57610f7a613e2b565b602002602001015160400151610f909190613dca565b610f9a9190613dff565b610fa49190613dff565b858581518110610fb657610fb6613e2b565b60200260200101516040015161213b565b1561101457818181518110610fde57610fde613e2b565b602002602001015160400151858481518110610ffc57610ffc613e2b565b602002602001018181516110109190613e13565b9052505b8061101e81613e41565b915050610e16565b5050808061103390613e41565b915050610a77565b50909392505050565b600754604051631df63f2b60e21b81523360048201526001600160a01b03909116906377d8fcac90602401602060405180830381865afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b09190613e72565b6110e95760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b604482015260640161060e565b6000806110f46112ff565b505091509150816111175760405162461bcd60e51b815260040161060e90613d78565b611120816121b2565b60005b60095481101561116d57600061113a838884612ef1565b905061114a338689898686612459565b95506000861161115a575061116d565b508061116581613e41565b915050611123565b505050505050565b600754604051631df63f2b60e21b81523360048201526001600160a01b03909116906377d8fcac90602401602060405180830381865afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190613e72565b61121a5760405162461bcd60e51b815260206004820152600a60248201526914d85b98dd1a5bdb995960b21b604482015260640161060e565b6000806112256112ff565b505091509150816112485760405162461bcd60e51b815260040161060e90613d78565b611251816121b2565b6000805b6009548110156112e45761126a838883612ef1565b915061127c6305f5e100612710613dca565b826112af33888b846112946305f5e100612710613dca565b61129e908e613dca565b6112a89190613dff565b8789612459565b6112b99190613dca565b6112c39190613dff565b9550600086116112d2576112e4565b806112dc81613e41565b915050611255565b50505050505050565b6112f5612f16565b6105906000612f70565b600080600080600d60149054906101000a900460ff161561156057600080600d60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113949190613eae565b50935050925050600080600c60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156113f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114159190613eae565b5093505092505061070873__$1d9efae94c88074632357998bef858df14$__637ae2b5c785426114459190613db3565b61144f8542613db3565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b49190613efe565b10826114c46305f5e10087613dca565b6114ce9190613dff565b6040516336aa19f360e11b815260048101869052602481018490526305f5e1009073__$1d9efae94c88074632357998bef858df14$__90636d5433e690604401602060405180830381865af415801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190613efe565b975097509750975050505050611571565b611568612fc0565b93509350935093505b90919293565b6115876305f5e100612710613dca565b81565b600160205282600052604060002060205281600052604060002081815481106115b257600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169750929091169450925085565b6003818154811061160157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b61162c612f16565b60005b818110156116c75760095481101561167e5782828281811061165357611653613e2b565b905060200201356009828154811061166d5761166d613e2b565b6000918252602090912001556116b5565b600983838381811061169257611692613e2b565b835460018101855560009485526020948590209190940292909201359190920155505b806116bf81613e41565b91505061162f565b505050565b6000806000806000600980549050600760009054906101000a90046001600160a01b03166001600160a01b031663c8d594db6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190613efe565b600760009054906101000a90046001600160a01b03166001600160a01b031663d448eebc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190613efe565b919790965090945062093a8093507f000000000000000000000000000000000000000000000000000000000000000092509050565b6009818154811061180d57600080fd5b600091825260209091200154905081565b611826612f16565b6000805b60085481101561188757826001600160a01b03166008828154811061185157611851613e2b565b6000918252602090912001546001600160a01b031614156118755760019150611887565b8061187f81613e41565b91505061182a565b50806118d957600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0384161790555b5050565b6118e5612f16565b6001600160a01b03811661194a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060e565b61195381612f70565b50565b60608060606000805b600954811015611ab15760005b8615156000908152600160209081526040808320858452909152902054811015611a9e578615156000908152600160209081526040808320858452909152902080546001600160a01b038a169190839081106119ca576119ca613e2b565b60009182526020909120600590910201546001600160a01b0316148015611a30575086151560009081526001602090815260408083208584529091529020805482908110611a1a57611a1a613e2b565b9060005260206000209060050201600401544211155b8015611a79575086151560009081526001602090815260408083208584529091528120805483908110611a6557611a65613e2b565b906000526020600020906005020160020154115b15611a8c57611a89600184613e13565b92505b80611a9681613e41565b91505061196c565b5080611aa981613e41565b91505061195f565b5060008167ffffffffffffffff811115611acd57611acd613e5c565b604051908082528060200260200182016040528015611af6578160200160208202803683370190505b50905060008267ffffffffffffffff811115611b1457611b14613e5c565b604051908082528060200260200182016040528015611b3d578160200160208202803683370190505b50905060008367ffffffffffffffff811115611b5b57611b5b613e5c565b604051908082528060200260200182016040528015611b84578160200160208202803683370190505b5090506000935060005b600954811015611dc25760005b8915156000908152600160209081526040808320858452909152902054811015611daf578915156000908152600160209081526040808320858452909152902080546001600160a01b038d16919083908110611bf957611bf9613e2b565b60009182526020909120600590910201546001600160a01b0316148015611c5f575089151560009081526001602090815260408083208584529091529020805482908110611c4957611c49613e2b565b9060005260206000209060050201600401544211155b8015611ca8575089151560009081526001602090815260408083208584529091528120805483908110611c9457611c94613e2b565b906000526020600020906005020160020154115b15611d9d57611cb8826001613e13565b858781518110611cca57611cca613e2b565b6020908102919091018101919091528a1515600090815260018252604080822085835290925220805482908110611d0357611d03613e2b565b906000526020600020906005020160020154848781518110611d2757611d27613e2b565b6020908102919091018101919091528a1515600090815260018252604080822085835290925220805482908110611d6057611d60613e2b565b906000526020600020906005020160030154838781518110611d8457611d84613e2b565b6020908102919091010152611d9a600187613e13565b95505b80611da781613e41565b915050611b9b565b5080611dba81613e41565b915050611b8e565b5091955093509150509250925092565b8015156000908152600160205260408120905b6009548110156116c757600081815260208390526040812054815b81811015611f4e576000848152602086905260408120805483908110611e2857611e28613e2b565b906000526020600020906005020160020154118015611e7857506000848152602086905260409020805482908110611e6257611e62613e2b565b9060005260206000209060050201600401544211155b15611f3c576000848152602086905260409020805482908110611e9d57611e9d613e2b565b90600052602060002090600502018560008681526020019081526020016000208481548110611ece57611ece613e2b565b60009182526020909120825460059092020180546001600160a01b039283166001600160a01b0319918216178255600180850154908301805491909416911617909155600280830154908201556003808301549082015560049182015491015582611f3881613e41565b9350505b80611f4681613e41565b915050611e00565b505b80821015611fcb576000838152602085905260409020805480611f7557611f75613f17565b60008281526020812060056000199093019283020180546001600160a01b031990811682556001820180549091169055600281018290556003810182905560040155905581611fc381613e41565b925050611f50565b50508080611fd890613e41565b915050611de5565b600082611fee576001611ff2565b6000195b846009848154811061200657612006613e2b565b906000526020600020015461201b9190613dca565b6120259190613f2d565b61203161271086613dca565b61203b9190613fb2565b949350505050565b6000836120c057600b546040516370a0823160e01b81526001600160a01b038781166004830152849216906370a08231906024015b602060405180830381865afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b99190613efe565b1015612132565b600a546040516370a0823160e01b81526001600160a01b038781166004830152859216906370a08231906024015b602060405180830381865afa15801561210b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212f9190613efe565b10155b95945050505050565b60008361217a57600b54604051636eb1769f60e11b81526001600160a01b0387811660048301523060248301528492169063dd62ed3e90604401612078565b600a54604051636eb1769f60e11b81526001600160a01b0387811660048301523060248301528592169063dd62ed3e906044016120ee565b6003541561195357600380546121ca90600190613db3565b815481106121da576121da613e2b565b90600052602060002090600302016000015460001480612424575073__$1d9efae94c88074632357998bef858df14$__636d5433e66105dc603c73__$1d9efae94c88074632357998bef858df14$__637ae2b5c7600360016003805490506122429190613db3565b8154811061225257612252613e2b565b906000526020600020906003020160020154426040518363ffffffff1660e01b815260040161228b929190918252602082015260400190565b602060405180830381865af41580156122a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cc9190613efe565b6122d69042613db3565b6122e190600f613dca565b6122eb9190613dff565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af415801561232c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123509190613efe565b73__$1d9efae94c88074632357998bef858df14$__631b5ac4b5612710600360016003805490506123819190613db3565b8154811061239157612391613e2b565b60009182526020909120600390910201546123ae61271087613dca565b6123b89190613dff565b6123c29190613ff3565b6040518263ffffffff1660e01b81526004016123e091815260200190565b602060405180830381865af41580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124219190613efe565b11155b6119535760405162461bcd60e51b8152602060048201526006602482015265141e0813135560d21b604482015260640161060e565b60008084116124955760405162461bcd60e51b815260206004820152600860248201526724ab26102737ba1760c11b604482015260640161060e565b841560009081526001602090815260408083208684529091528120905b8154811015612adb576000861180156124ee575060008282815481106124da576124da613e2b565b906000526020600020906005020160020154115b801561251d575081818154811061250757612507613e2b565b9060005260206000209060050201600401544211155b15612ac957600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c78885858154811061255157612551613e2b565b9060005260206000209060050201600201546040518363ffffffff1660e01b8152600401612589929190918252602082015260400190565b602060405180830381865af41580156125a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ca9190613efe565b905060007f00000000000000000000000000000000000000000000000000000000000000006305f5e1006127106126018986613dca565b61260b9190613dff565b6126159190613dff565b61261f9190613dff565b905061265984848154811061263657612636613e2b565b60009182526020909120600590910201546001600160a01b03168a158385612043565b8015612698575061269884848154811061267557612675613e2b565b60009182526020909120600590910201546001600160a01b03168a15838561213b565b15612ac657818484815481106126b0576126b0613e2b565b906000526020600020906005020160020160008282546126d09190613db3565b909155506126e090508289613db3565b975080600460008282546126f49190613e13565b92505081905550816005600082825461270d9190613e13565b925050819055506001600660008282546127279190613e13565b90915550612743905061273c61271088613dff565b83426130f4565b6129d68961277c5784848154811061275d5761275d613e2b565b60009182526020909120600590910201546001600160a01b031661277e565b8b5b8a612789578c6127b6565b85858154811061279b5761279b613e2b565b60009182526020909120600590910201546001600160a01b03165b8b612843576007546040805163c8d594db60e01b81529051612710926001600160a01b03169163c8d594db9160048083019260209291908290030181865afa158015612806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282a9190613efe565b6128349086613f2d565b61283e9190614032565b6128c6565b600754604080516335123baf60e21b81529051612710926001600160a01b03169163d448eebc9160048083019260209291908290030181865afa15801561288e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b29190613efe565b6128bc9086613dca565b6128c69190613dff565b8c61295357600754604080516335123baf60e21b81529051612710926001600160a01b03169163d448eebc9160048083019260209291908290030181865afa158015612916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293a9190613efe565b6129449088613dca565b61294e9190613dff565b613268565b6007546040805163c8d594db60e01b81529051612710926001600160a01b03169163c8d594db9160048083019260209291908290030181865afa15801561299e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c29190613efe565b6129cc9088613f2d565b61294e9190614032565b612ac689612a0f578484815481106129f0576129f0613e2b565b60009182526020909120600590910201546001600160a01b0316612a11565b8b5b8a612a4a57858581548110612a2857612a28613e2b565b60009182526020909120600160059092020101546001600160a01b0316612a4c565b8b5b8b612a57578d612a84565b868681548110612a6957612a69613e2b565b60009182526020909120600590910201546001600160a01b03165b8c612a8f578d612abf565b878781548110612aa157612aa1613e2b565b60009182526020909120600160059092020101546001600160a01b03165b8686613622565b50505b80612ad381613e41565b9150506124b2565b50612aea888888888888613711565b98975050505050505050565b60085460609060009067ffffffffffffffff811115612b1757612b17613e5c565b604051908082528060200260200182016040528015612b8c57816020015b612b796040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b815260200190600190039081612b355790505b5060085460405163b863bd3760e01b8152600481019190915290915060009073__$1d9efae94c88074632357998bef858df14$__9063b863bd3790602401602060405180830381865af4158015612be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0b9190613efe565b9050805b600854612c1d908390613e13565b811015612ee6576008546000908210612c4257600854612c3d9083613db3565b612c44565b815b905060007f000000000000000000000000000000000000000000000000000000000000000060088381548110612c7c57612c7c613e2b565b600091825260209091200154600a54600b546001600160a01b0392831692639756474b92811691168d8d8d612cb76305f5e100612710613dca565b6040516001600160e01b031960e089901b1681526001600160a01b03968716600482015295909416602486015291151560448501526064840152608483015260a482015260c401602060405180830381865afa158015612d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3f9190613efe565b612d499190613dca565b905060088281548110612d5e57612d5e613e2b565b600091825260209091200154600a54600b5460405163bbf6bf2160e01b81526001600160a01b039384169363bbf6bf2193612da493908216929116908d90600401614060565b602060405180830381865afa158015612dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de59190613e72565b612df0576000612df3565b60015b612e009060ff1682613dca565b90506040518060a0016040528060088481548110612e2057612e20613e2b565b600091825260209182902001546001600160a01b0316825260088054929091019185908110612e5157612e51613e2b565b600091825260209182902001546001600160a01b0316825201886305f5e100612e7c61271086613dca565b612e869190613dca565b612e909190613dff565b81526020014281526020014261012c612ea99190613e13565b905285612eb68686613db3565b81518110612ec657612ec6613e2b565b602002602001018190525050508080612ede90613e41565b915050612c0f565b509095945050505050565b600082612f0057600019611ff2565b6001846009848154811061200657612006613e2b565b6000546001600160a01b031633146105905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060038054905060001415612fea5750506002546001925090506305f5e10042611571565b60008060005b60035481101561309e576003818154811061300d5761300d613e2b565b9060005260206000209060030201600001546003828154811061303257613032613e2b565b90600052602060002090600302016001015461304e9190613dca565b6130589084613e13565b92506003818154811061306d5761306d613e2b565b9060005260206000209060030201600101548261308a9190613e13565b91508061309681613e41565b915050612ff0565b5060016130ab8284613dff565b600380546305f5e10091906130c290600190613db3565b815481106130d2576130d2613e2b565b9060005260206000209060030201600201549550955095509550505090919293565b604080516060810182528481526020810184815291810183815260038054600181018255600082905292517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9382029384015592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d90910155546005116116c75760005b6003546131ad90600190613db3565b81101561322c5760036131c1826001613e13565b815481106131d1576131d1613e2b565b9060005260206000209060030201600382815481106131f2576131f2613e2b565b600091825260209091208254600390920201908155600180830154908201556002918201549101558061322481613e41565b91505061319e565b50600380548061323e5761323e613f17565b60008281526020812060036000199093019283020181815560018101829055600201559055505050565b600082131561335557600a54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9389939116916361d027b3916004808201926020929091908290030181865afa1580156132c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ed9190614084565b856040518463ffffffff1660e01b815260040161330c93929190614060565b6020604051808303816000875af115801561332b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334f9190613e72565b50613443565b600082121561344357600a54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9316916361d027b39160048083019260209291908290030181865afa1580156133b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d69190614084565b866133e0866140a1565b6040518463ffffffff1660e01b81526004016133fe93929190614060565b6020604051808303816000875af115801561341d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134419190613e72565b505b600081131561353057600b54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9388939116916361d027b3916004808201926020929091908290030181865afa1580156134a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c89190614084565b846040518463ffffffff1660e01b81526004016134e793929190614060565b6020604051808303816000875af1158015613506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352a9190613e72565b5061361c565b600081121561361c57600b54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9316916361d027b39160048083019260209291908290030181865afa15801561358d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b19190614084565b856135bb856140a1565b6040518463ffffffff1660e01b81526004016135d993929190614060565b6020604051808303816000875af11580156135f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190613e72565b50505050565b600a546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061365690899087908690600401614060565b6020604051808303816000875af1158015613675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136999190613e72565b50600b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906136ce90879089908790600401614060565b6020604051808303816000875af11580156136ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190613e72565b60008061372086158585612af6565b905060005b8151811015613ae25760008611801561375b5750600082828151811061374d5761374d613e2b565b602002602001015160400151115b8015613784575081818151811061377457613774613e2b565b6020026020010151608001514211155b15613ad057600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c7888585815181106137b8576137b8613e2b565b6020026020010151604001516040518363ffffffff1660e01b81526004016137ea929190918252602082015260400190565b602060405180830381865af4158015613807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382b9190613efe565b905060007f00000000000000000000000000000000000000000000000000000000000000006305f5e1006127106138628986613dca565b61386c9190613dff565b6138769190613dff565b6138809190613dff565b90506138ac84848151811061389757613897613e2b565b6020026020010151600001518a158385612043565b80156138dd57506138dd8484815181106138c8576138c8613e2b565b6020026020010151600001518a15838561213b565b15613acd57818484815181106138f5576138f5613e2b565b602002602001015160400181815161390d9190613db3565b90525061391a8289613db3565b9750806004600082825461392e9190613e13565b9250508190555081600560008282546139479190613e13565b925050819055506001600660008282546139619190613e13565b90915550613976905061273c61271088613dff565b613a27896139a15784848151811061399057613990613e2b565b6020026020010151600001516139a3565b8b5b8a6139cb578585815181106139ba576139ba613e2b565b6020026020010151602001516139cd565b8b5b8b6139d8578d6139f7565b8686815181106139ea576139ea613e2b565b6020026020010151600001515b8c613a02578d612abf565b878781518110613a1457613a14613e2b565b6020026020010151602001518686613622565b613acd89613a5257848481518110613a4157613a41613e2b565b602002602001015160000151613a54565b8b5b8a613a5f578c6127b6565b858581518110613a7157613a71613e2b565b6020026020010151600001518b612843576007546040805163c8d594db60e01b81529051612710926001600160a01b03169163c8d594db9160048083019260209291908290030181865afa158015612806573d6000803e3d6000fd5b50505b80613ada81613e41565b915050613725565b5093979650505050505050565b600060208284031215613b0157600080fd5b5035919050565b801515811461195357600080fd5b6001600160a01b038116811461195357600080fd5b600080600080600060a08688031215613b4357600080fd5b8535613b4e81613b08565b94506020860135935060408601359250606086013591506080860135613b7381613b16565b809150509295509295909350565b600080600060608486031215613b9657600080fd5b8335613ba181613b08565b95602085013595506040909401359392505050565b600060208284031215613bc857600080fd5b8135613bd381613b08565b9392505050565b600081518084526020808501945080840160005b83811015613c0a57815187529582019590820190600101613bee565b509495945050505050565b602081526000613bd36020830184613bda565b600080600060608486031215613c3d57600080fd5b8335613c4881613b08565b9250602084013591506040840135613c5f81613b16565b809150509250925092565b60008060208385031215613c7d57600080fd5b823567ffffffffffffffff80821115613c9557600080fd5b818501915085601f830112613ca957600080fd5b813581811115613cb857600080fd5b8660208260051b8501011115613ccd57600080fd5b60209290920196919550909350505050565b600060208284031215613cf157600080fd5b8135613bd381613b16565b60008060408385031215613d0f57600080fd5b8235613d1a81613b16565b91506020830135613d2a81613b08565b809150509250929050565b606081526000613d486060830186613bda565b8281036020840152613d5a8186613bda565b90508281036040840152613d6e8185613bda565b9695505050505050565b6020808252600b908201526a27b930b1b632903237bbb760a91b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015613dc557613dc5613d9d565b500390565b6000816000190483118215151615613de457613de4613d9d565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613e0e57613e0e613de9565b500490565b60008219821115613e2657613e26613d9d565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613e5557613e55613d9d565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613e8457600080fd5b8151613bd381613b08565b805169ffffffffffffffffffff81168114613ea957600080fd5b919050565b600080600080600060a08688031215613ec657600080fd5b613ecf86613e8f565b9450602086015193506040860151925060608601519150613ef260808701613e8f565b90509295509295909350565b600060208284031215613f1057600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b60006001600160ff1b0381841382841380821686840486111615613f5357613f53613d9d565b600160ff1b6000871282811687830589121615613f7257613f72613d9d565b60008712925087820587128484161615613f8e57613f8e613d9d565b87850587128184161615613fa457613fa4613d9d565b505050929093029392505050565b600080821280156001600160ff1b0384900385131615613fd457613fd4613d9d565b600160ff1b8390038412811615613fed57613fed613d9d565b50500190565b60008083128015600160ff1b85018412161561401157614011613d9d565b6001600160ff1b038401831381161561402c5761402c613d9d565b50500390565b60008261404157614041613de9565b600160ff1b82146000198414161561405b5761405b613d9d565b500590565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561409657600080fd5b8151613bd381613b16565b6000600160ff1b8214156140b7576140b7613d9d565b506000039056fea264697066735822122061a0a378a941acade50e17acc41115a36ab7957e11aaa3331973919c39dfd0e764736f6c634300080b0033";

    public static final String FUNC_BPS_UNIT = "BPS_UNIT";

    public static final String FUNC_DBOE_NO_SWAP = "DBOE_NO_SWAP";

    public static final String FUNC_MAX_ORACLE_DOWN_SEC = "MAX_ORACLE_DOWN_SEC";

    public static final String FUNC_MAX_ORDER_VALIDITY_SEC = "MAX_ORDER_VALIDITY_SEC";

    public static final String FUNC_PRICE_SCALE = "PRICE_SCALE";

    public static final String FUNC_PX_BPS_SCALE = "PX_BPS_SCALE";

    public static final String FUNC_PX_LMT_BPS = "PX_LMT_BPS";

    public static final String FUNC_PX_LMT_BPS_PER_MIN = "PX_LMT_BPS_PER_MIN";

    public static final String FUNC_ADDDEDICATEDMM = "addDedicatedMM";

    public static final String FUNC_ALLQUOTES = "allQuotes";

    public static final String FUNC_BASETOKEN = "baseToken";

    public static final String FUNC_BASETOKENORACLE = "baseTokenOracle";

    public static final String FUNC_CLEANOB = "cleanOb";

    public static final String FUNC_CONFIG = "config";

    public static final String FUNC_DECIMALFACTOR = "decimalFactor";

    public static final String FUNC_DEDICATEDMMS = "dedicatedMMs";

    public static final String FUNC_GETOBSPECS = "getObSpecs";

    public static final String FUNC_INITREFPX = "initRefPx";

    public static final String FUNC_LASTTXNS = "lastTxns";

    public static final String FUNC_MINQUOTETOKENQTY = "minQuoteTokenQty";

    public static final String FUNC_OBDEPTH = "obDepth";

    public static final String FUNC_OBSPREADSBPS = "obSpreadsBps";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PRICEORACLEENABLE = "priceOracleEnable";

    public static final String FUNC_QUOTETOKEN = "quoteToken";

    public static final String FUNC_QUOTETOKENORACLE = "quoteTokenOracle";

    public static final String FUNC_REFINFO = "refInfo";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETOBSPREADS = "setObSpreads";

    public static final String FUNC_TOCANCEL = "toCancel";

    public static final String FUNC_TOPRICE = "toPrice";

    public static final String FUNC_TOTRADE = "toTrade";

    public static final String FUNC_TOTRADEBYQTY = "toTradeByQty";

    public static final String FUNC_TOTALTRADECOUNT = "totalTradeCount";

    public static final String FUNC_TOTALTRADEDAMOUNT = "totalTradedAmount";

    public static final String FUNC_TOTALTRADEDNOTIONAL = "totalTradedNotional";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_USERQUOTES = "userQuotes";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOESpotMarket(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOESpotMarket(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOESpotMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOESpotMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BPS_UNIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BPS_UNIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> DBOE_NO_SWAP() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DBOE_NO_SWAP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORACLE_DOWN_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORACLE_DOWN_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORDER_VALIDITY_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORDER_VALIDITY_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PRICE_SCALE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRICE_SCALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PX_BPS_SCALE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PX_BPS_SCALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PX_LMT_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PX_LMT_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PX_LMT_BPS_PER_MIN() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PX_LMT_BPS_PER_MIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addDedicatedMM(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDDEDICATEDMM, 
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>> allQuotes(Boolean param0, BigInteger param1, BigInteger param2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLQUOTES, 
                Arrays.<Type>asList(new Bool(param0),
                new Uint256(param1),
                new Uint256(param2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> baseToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASETOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> baseTokenOracle() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASETOKENORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cleanOb() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEANOB, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> config() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> decimalFactor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALFACTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> dedicatedMMs(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEDICATEDMMS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getObSpecs() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOBSPECS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> initRefPx() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITREFPX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> lastTxns(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LASTTXNS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minQuoteTokenQty() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINQUOTETOKENQTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> obDepth(Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBDEPTH, 
                Arrays.<Type>asList(new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> obSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> priceOracleEnable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRICEORACLEENABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> quoteToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUOTETOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> quoteTokenOracle() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUOTETOKENORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<Boolean, BigInteger, BigInteger, BigInteger>> refInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Boolean, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<Boolean, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<Boolean, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Boolean, BigInteger, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setObSpreads(List<BigInteger> _spreads) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETOBSPREADS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_spreads, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toCancel(Boolean buySell, BigInteger priceLevel, BigInteger utcT) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOCANCEL, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(priceLevel),
                new Uint256(utcT)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toPrice(Boolean buySell, BigInteger amount, BigInteger priceLevel, BigInteger validPeriodSecs, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOPRICE, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(amount),
                new Uint256(priceLevel),
                new Uint256(validPeriodSecs),
                new Address(_beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTrade(Boolean buySell, BigInteger notional, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADE, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(notional),
                new Address(_beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTradeByQty(Boolean buySell, BigInteger amount, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADEBYQTY, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(amount),
                new Address(_beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalTradeCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTradedAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADEDAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTradedNotional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADEDNOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>> userQuotes(String addr, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERQUOTES, 
                Arrays.<Type>asList(new Address(addr),
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static DBOESpotMarket load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOESpotMarket(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOESpotMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOESpotMarket(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOESpotMarket load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOESpotMarket(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOESpotMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOESpotMarket(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx, String _dmmAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx),
                new Address(_dmmAddr)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx, String _dmmAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx),
                new Address(_dmmAddr)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx, String _dmmAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx),
                new Address(_dmmAddr)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx, String _dmmAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx),
                new Address(_dmmAddr)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
