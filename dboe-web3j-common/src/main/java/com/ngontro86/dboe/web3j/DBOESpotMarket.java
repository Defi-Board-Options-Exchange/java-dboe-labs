package com.ngontro86.dboe.web3j;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DBOESpotMarket extends Contract {
    public static final String BINARY = "0x6101a0604052600060c0908152601960e05260326101005260646101205260c8610140526101f4610160526103e8610180526200004190600890600762000449565b506040805160e08101825260008152601960208201526032918101919091526064606082015260c860808201526101f460a08201526103e860c08201526200008e90600990600762000449565b503480156200009c57600080fd5b5060405162003d4b38038062003d4b833981016040819052620000bf91620004d3565b620000ca33620003f9565b6001600160a01b03871615801590620000eb57506001600160a01b03861615155b80156200010057506001600160a01b03851615155b6200010a57600080fd5b600780546001600160a01b03808a166001600160a01b031992831617909255600a80548984169083168117909155600b8054938916939092169290921790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801562000185573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ab919062000556565b60ff16600b60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000202573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000228919062000556565b60ff1610156200026d5760405162461bcd60e51b815260206004820152600c60248201526b49564c20646563696d616c7360a01b604482015260640160405180910390fd5b6001600160a01b038416158015906200028e57506001600160a01b03831615155b15620002d957600c80546001600160a01b038087166001600160a01b031990921691909117909155600d80546001600160a81b03191691851691909117600160a01b179055620002df565b60028190555b6080829052600a546040805163313ce56760e01b815290516001600160a01b039092169163313ce567916004808201926020929091908290030181865afa1580156200032f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000355919062000556565b600b60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003cf919062000556565b620003db919062000598565b620003e890600a620006bd565b60a05250620006ce95505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156200048d579160200282015b828111156200048d578251829061ffff169055916020019190600101906200046a565b506200049b9291506200049f565b5090565b5b808211156200049b5760008155600101620004a0565b80516001600160a01b0381168114620004ce57600080fd5b919050565b600080600080600080600060e0888a031215620004ef57600080fd5b620004fa88620004b6565b96506200050a60208901620004b6565b95506200051a60408901620004b6565b94506200052a60608901620004b6565b93506200053a60808901620004b6565b925060a0880151915060c0880151905092959891949750929550565b6000602082840312156200056957600080fd5b815160ff811681146200057b57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015620005b557620005b562000582565b90039392505050565b600181815b80851115620005ff578160001904821115620005e357620005e362000582565b80851615620005f157918102915b93841c9390800290620005c3565b509250929050565b6000826200061857506001620006b7565b816200062757506000620006b7565b81600181146200064057600281146200064b576200066b565b6001915050620006b7565b60ff8411156200065f576200065f62000582565b50506001821b620006b7565b5060208310610133831016604e8410600b841016171562000690575081810a620006b7565b6200069c8383620005be565b8060001904821115620006b357620006b362000582565b0290505b92915050565b60006200057b60ff84168362000607565b60805160a05161362d6200071e6000396000818161039b015281816108bd015281816109df015281816117da015261252d01526000818161042001528181610f8a015261182d015261362d6000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c806362d877b1116101305780639bb6cd4d116100b8578063c55dae631161007c578063c55dae63146104d3578063c56a3cd2146104e6578063f2fde38b14610516578063f3ecbd0f14610529578063fb261e871461054b57600080fd5b80639bb6cd4d14610442578063a8630a7f1461044b578063a8c1685614610491578063a9b50dab146104bf578063c33f59d3146104c857600080fd5b806379502c55116100ff57806379502c55146103c5578063809bec11146103d85780638d473db2146104025780638da5cb5b1461040a5780638f23c6b91461041b57600080fd5b806362d877b114610370578063698e2c54146103835780636d6a6a4d14610396578063715018a6146103bd57600080fd5b80633ddda236116101b35780635645598611610182578063564559861461030a57806356cbd6d81461031d578063582aa40d1461032657806359502bac1461034a57806360b6fa0b1461035d57600080fd5b80633ddda236146102bb578063489a298d146102db5780634cc2e785146102e457806355463534146102f757600080fd5b806322145194116101fa578063221451941461028f5780632c6e9cd614610299578063315680a4146102a15780633580b7a1146102a95780633bb76ae2146102b257600080fd5b806252c68a1461022b578063016786fa1461025b5780631396827b14610265578063217a4b701461027c575b600080fd5b600d5461023e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61026361055e565b005b61026e60025481565b604051908152602001610252565b600a5461023e906001600160a01b031681565b61026e62093a8081565b61026e600581565b61026e600f81565b61026e60065481565b61026e60045481565b6102ce6102c93660046130ab565b610574565b604051610252919061310a565b61026e61271081565b6102636102f2366004613132565b6105db565b61026e610305366004613188565b6105ef565b600c5461023e906001600160a01b031681565b61026e60055481565b600d5461033a90600160a01b900460ff1681565b6040519015158152602001610252565b6102636103583660046131a1565b610610565b6102ce61036b3660046130ab565b610721565b61026361037e3660046131d6565b610b2c565b6102636103913660046131d6565b610b3c565b61026e7f000000000000000000000000000000000000000000000000000000000000000081565b610263610b47565b60075461023e906001600160a01b031681565b6103e0610b59565b6040805194151585526020850193909352918301526060820152608001610252565b61026e610dd1565b6000546001600160a01b031661023e565b61026e7f000000000000000000000000000000000000000000000000000000000000000081565b61026e61070881565b61045e6104593660046131a1565b610de4565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a001610252565b6104a461049f366004613188565b610e4b565b60408051938452602084019290925290820152606001610252565b61026e6105dc81565b61026e6305f5e10081565b600b5461023e906001600160a01b031681565b6104ee610e7e565b604080519586526020860194909452928401919091526060830152608082015260a001610252565b610263610524366004613218565b610faf565b61053c610537366004613235565b61102d565b6040516102529392919061326e565b61026e610559366004613188565b6114c3565b61056860016114d3565b61057260006114d3565b565b606081610582576009610585565b60085b8054806020026020016040519081016040528092919081815260200182805480156105cf57602002820191906000526020600020905b8154815260200190600101908083116105bb575b50505050509050919050565b6105e885858585856116ee565b5050505050565b600881815481106105ff57600080fd5b600091825260209091200154905081565b8215156000908152600160208190526040822090829061063090866132c7565b8152602001908152602001600020905060005b81548110156105e857336001600160a01b0316828281548110610668576106686132de565b60009182526020909120600590910201546001600160a01b03161480156106b157508282828154811061069d5761069d6132de565b906000526020600020906005020160030154145b80156106e0575060008282815481106106cc576106cc6132de565b906000526020600020906005020160020154115b1561070f5760008282815481106106f9576106f96132de565b9060005260206000209060050201600201819055505b80610719816132f4565b915050610643565b6060600082610731576009610734565b60085b5467ffffffffffffffff81111561074d5761074d61330f565b604051908082528060200260200182016040528015610776578160200160208202803683370190505b5090506000610783610b59565b505091505060005b8251811015610b23576000805b8615156000908152600160209081526040808320868452909152902054811015610af157861515600090815260016020908152604080832086845290915281208054839081106107ea576107ea6132de565b906000526020600020906005020160020154118015610848575086151560009081526001602090815260408083208684529091529020805482908110610832576108326132de565b9060005260206000209060050201600401544211155b801561096a575086151560009081526001602090815260408083208684529091529020805461096a919083908110610882576108826132de565b600091825260208083206005909202909101548a15158352600182526040808420888552909252912080546001600160a01b03909216918a917f0000000000000000000000000000000000000000000000000000000000000000916305f5e100918a91889081106108f5576108f56132de565b9060005260206000209060050201600201546109119190613325565b61091b919061335a565b610925919061335a565b8a151560009081526001602090815260408083208a84529091529020805486908110610953576109536132de565b906000526020600020906005020160020154611a3a565b8015610a8c5750861515600090815260016020908152604080832086845290915290208054610a8c9190839081106109a4576109a46132de565b600091825260208083206005909202909101548a15158352600182526040808420888552909252912080546001600160a01b03909216918a917f0000000000000000000000000000000000000000000000000000000000000000916305f5e100918a9188908110610a1757610a176132de565b906000526020600020906005020160020154610a339190613325565b610a3d919061335a565b610a47919061335a565b8a151560009081526001602090815260408083208a84529091529020805486908110610a7557610a756132de565b906000526020600020906005020160020154611b32565b15610adf5786151560009081526001602090815260408083208684529091529020805482908110610abf57610abf6132de565b90600052602060002090600502016002015482610adc919061336e565b91505b80610ae9816132f4565b915050610798565b5080848381518110610b0557610b056132de565b60209081029190910101525080610b1b816132f4565b91505061078b565b50909392505050565b610b37838383611ba9565b505050565b610b37838383611ce7565b610b4f611ec1565b6105726000611f1b565b600080600080600d60149054906101000a900460ff1615610dba57600080600d60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee91906133a5565b50935050925050600080600c60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906133a5565b5093505092505061070873__$1d9efae94c88074632357998bef858df14$__637ae2b5c78542610c9f91906132c7565b610ca985426132c7565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e91906133f5565b1082610d1e6305f5e10087613325565b610d28919061335a565b6040516336aa19f360e11b815260048101869052602481018490526305f5e1009073__$1d9efae94c88074632357998bef858df14$$1d9efae94c88074632357998bef858df14$__636d5433e66105dc603c73__$1d9efae94c88074632357998bef858df14$__637ae2b5c76003600160038054905061219f91906132c7565b815481106121af576121af6132de565b906000526020600020906003020160020154426040518363ffffffff1660e01b81526004016121e8929190918252602082015260400190565b602060405180830381865af4158015612205573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222991906133f5565b61223390426132c7565b61223e90600f613325565b612248919061335a565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015612289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ad91906133f5565b73__$1d9efae94c88074632357998bef858df14$__631b5ac4b5612710600360016003805490506122de91906132c7565b815481106122ee576122ee6132de565b600091825260209091206003909102015461230b61271087613325565b612315919061335a565b61231f919061352c565b6040518263ffffffff1660e01b815260040161233d91815260200190565b602060405180830381865af415801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e91906133f5565b11155b61102a5760405162461bcd60e51b8152602060048201526006602482015265141e0813135560d21b6044820152606401611018565b60008084116123f25760405162461bcd60e51b815260206004820152600860248201526724ab26102737ba1760c11b6044820152606401611018565b841560009081526001602090815260408083208684529091528120905b8154811015612a385760008611801561244b57506000828281548110612437576124376132de565b906000526020600020906005020160020154115b801561247a5750818181548110612464576124646132de565b9060005260206000209060050201600401544211155b15612a2657600073__$1d9efae94c88074632357998bef858df14$__637ae2b5c7888585815481106124ae576124ae6132de565b9060005260206000209060050201600201546040518363ffffffff1660e01b81526004016124e6929190918252602082015260400190565b602060405180830381865af4158015612503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252791906133f5565b905060007f00000000000000000000000000000000000000000000000000000000000000006305f5e10061271061255e8986613325565b612568919061335a565b612572919061335a565b61257c919061335a565b90506125b6848481548110612593576125936132de565b60009182526020909120600590910201546001600160a01b03168a158385611a3a565b80156125f557506125f58484815481106125d2576125d26132de565b60009182526020909120600590910201546001600160a01b03168a158385611b32565b15612a23578184848154811061260d5761260d6132de565b9060005260206000209060050201600201600082825461262d91906132c7565b9091555061263d905082896132c7565b97508060046000828254612651919061336e565b92505081905550816005600082825461266a919061336e565b92505081905550600160066000828254612684919061336e565b909155506126a090506126996127108861335a565b8342612a77565b612933896126d9578484815481106126ba576126ba6132de565b60009182526020909120600590910201546001600160a01b03166126db565b8b5b8a6126e6578c612713565b8585815481106126f8576126f86132de565b60009182526020909120600590910201546001600160a01b03165b8b6127a0576007546040805163c8d594db60e01b81529051612710926001600160a01b03169163c8d594db9160048083019260209291908290030181865afa158015612763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278791906133f5565b6127919086613466565b61279b919061356b565b612823565b600754604080516335123baf60e21b81529051612710926001600160a01b03169163d448eebc9160048083019260209291908290030181865afa1580156127eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280f91906133f5565b6128199086613325565b612823919061335a565b8c6128b057600754604080516335123baf60e21b81529051612710926001600160a01b03169163d448eebc9160048083019260209291908290030181865afa158015612873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289791906133f5565b6128a19088613325565b6128ab919061335a565b612beb565b6007546040805163c8d594db60e01b81529051612710926001600160a01b03169163c8d594db9160048083019260209291908290030181865afa1580156128fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291f91906133f5565b6129299088613466565b6128ab919061356b565b612a238961296c5784848154811061294d5761294d6132de565b60009182526020909120600590910201546001600160a01b031661296e565b8b5b8a6129a757858581548110612985576129856132de565b60009182526020909120600160059092020101546001600160a01b03166129a9565b8b5b8b6129b4578d6129e1565b8686815481106129c6576129c66132de565b60009182526020909120600590910201546001600160a01b03165b8c6129ec578d612a1c565b8787815481106129fe576129fe6132de565b60009182526020909120600160059092020101546001600160a01b03165b8686612fa5565b50505b80612a30816132f4565b91505061240f565b5093979650505050505050565b600082612a5457600019612a57565b60015b8484612a645760086120c1565b600984815481106120d2576120d26132de565b604080516060810182528481526020810184815291810183815260038054600181018255600082905292517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9382029384015592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d9091015554600511610b375760005b600354612b30906001906132c7565b811015612baf576003612b4482600161336e565b81548110612b5457612b546132de565b906000526020600020906003020160038281548110612b7557612b756132de565b6000918252602090912082546003909202019081556001808301549082015560029182015491015580612ba7816132f4565b915050612b21565b506003805480612bc157612bc161340e565b60008281526020812060036000199093019283020181815560018101829055600201559055505050565b6000821315612cd857600a54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9389939116916361d027b3916004808201926020929091908290030181865afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c709190613599565b856040518463ffffffff1660e01b8152600401612c8f939291906135b6565b6020604051808303816000875af1158015612cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd29190613449565b50612dc6565b6000821215612dc657600a54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9316916361d027b39160048083019260209291908290030181865afa158015612d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d599190613599565b86612d63866135da565b6040518463ffffffff1660e01b8152600401612d81939291906135b6565b6020604051808303816000875af1158015612da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc49190613449565b505b6000811315612eb357600b54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9388939116916361d027b3916004808201926020929091908290030181865afa158015612e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4b9190613599565b846040518463ffffffff1660e01b8152600401612e6a939291906135b6565b6020604051808303816000875af1158015612e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ead9190613449565b50612f9f565b6000811215612f9f57600b54600754604080516361d027b360e01b815290516001600160a01b03938416936323b872dd9316916361d027b39160048083019260209291908290030181865afa158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f349190613599565b85612f3e856135da565b6040518463ffffffff1660e01b8152600401612f5c939291906135b6565b6020604051808303816000875af1158015612f7b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e89190613449565b50505050565b600a546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612fd9908990879086906004016135b6565b6020604051808303816000875af1158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c9190613449565b50600b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90613051908790899087906004016135b6565b6020604051808303816000875af1158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190613449565b50505050505050565b801515811461102a57600080fd5b6000602082840312156130bd57600080fd5b81356130c88161309d565b9392505050565b600081518084526020808501945080840160005b838110156130ff578151875295820195908201906001016130e3565b509495945050505050565b6020815260006130c860208301846130cf565b6001600160a01b038116811461102a57600080fd5b600080600080600060a0868803121561314a57600080fd5b85356131558161309d565b9450602086013593506040860135925060608601359150608086013561317a8161311d565b809150509295509295909350565b60006020828403121561319a57600080fd5b5035919050565b6000806000606084860312156131b657600080fd5b83356131c18161309d565b95602085013595506040909401359392505050565b6000806000606084860312156131eb57600080fd5b83356131f68161309d565b925060208401359150604084013561320d8161311d565b809150509250925092565b60006020828403121561322a57600080fd5b81356130c88161311d565b6000806040838503121561324857600080fd5b82356132538161311d565b915060208301356132638161309d565b809150509250929050565b60608152600061328160608301866130cf565b828103602084015261329381866130cf565b905082810360408401526132a781856130cf565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156132d9576132d96132b1565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613308576133086132b1565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600081600019048311821515161561333f5761333f6132b1565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261336957613369613344565b500490565b60008219821115613381576133816132b1565b500190565b805169ffffffffffffffffffff811681146133a057600080fd5b919050565b600080600080600060a086880312156133bd57600080fd5b6133c686613386565b94506020860151935060408601519250606086015191506133e960808701613386565b90509295509295909350565b60006020828403121561340757600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b6020808252600b908201526a27b930b1b632903237bbb760a91b604082015260600190565b60006020828403121561345b57600080fd5b81516130c88161309d565b60006001600160ff1b038184138284138082168684048611161561348c5761348c6132b1565b600160ff1b60008712828116878305891216156134ab576134ab6132b1565b600087129250878205871284841616156134c7576134c76132b1565b878505871281841616156134dd576134dd6132b1565b505050929093029392505050565b600080821280156001600160ff1b038490038513161561350d5761350d6132b1565b600160ff1b8390038412811615613526576135266132b1565b50500190565b60008083128015600160ff1b85018412161561354a5761354a6132b1565b6001600160ff1b0384018313811615613565576135656132b1565b50500390565b60008261357a5761357a613344565b600160ff1b821460001984141615613594576135946132b1565b500590565b6000602082840312156135ab57600080fd5b81516130c88161311d565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000600160ff1b8214156135f0576135f06132b1565b506000039056fea264697066735822122091ae3396e118051322d7d00949c314ed8dd0be6bd1ba799028853ce29af27e5364736f6c634300080b0033";

    public static final String FUNC_BPS_UNIT = "BPS_UNIT";

    public static final String FUNC_DBOE_NO_SWAP = "DBOE_NO_SWAP";

    public static final String FUNC_MAX_ORACLE_DOWN_SEC = "MAX_ORACLE_DOWN_SEC";

    public static final String FUNC_MAX_ORDER_VALIDITY_SEC = "MAX_ORDER_VALIDITY_SEC";

    public static final String FUNC_PRICE_SCALE = "PRICE_SCALE";

    public static final String FUNC_PX_BPS_SCALE = "PX_BPS_SCALE";

    public static final String FUNC_PX_LMT_BPS = "PX_LMT_BPS";

    public static final String FUNC_PX_LMT_BPS_PER_MIN = "PX_LMT_BPS_PER_MIN";

    public static final String FUNC_ALLQUOTES = "allQuotes";

    public static final String FUNC_ASKSPREADSBPS = "askSpreadsBps";

    public static final String FUNC_BASETOKEN = "baseToken";

    public static final String FUNC_BASETOKENORACLE = "baseTokenOracle";

    public static final String FUNC_BIDSPREADSBPS = "bidSpreadsBps";

    public static final String FUNC_CLEANOB = "cleanOb";

    public static final String FUNC_CONFIG = "config";

    public static final String FUNC_DECIMALFACTOR = "decimalFactor";

    public static final String FUNC_GETFIXEDSPREADS = "getFixedSpreads";

    public static final String FUNC_GETOBSPECS = "getObSpecs";

    public static final String FUNC_INITREFPX = "initRefPx";

    public static final String FUNC_LASTTXNS = "lastTxns";

    public static final String FUNC_MINQUOTETOKENQTY = "minQuoteTokenQty";

    public static final String FUNC_OBDEPTH = "obDepth";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PRICEORACLEENABLE = "priceOracleEnable";

    public static final String FUNC_QUOTETOKEN = "quoteToken";

    public static final String FUNC_QUOTETOKENORACLE = "quoteTokenOracle";

    public static final String FUNC_REFINFO = "refInfo";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TOCANCEL = "toCancel";

    public static final String FUNC_TOPRICE = "toPrice";

    public static final String FUNC_TOTRADE = "toTrade";

    public static final String FUNC_TOTRADEBYQTY = "toTradeByQty";

    public static final String FUNC_TOTALTRADECOUNT = "totalTradeCount";

    public static final String FUNC_TOTALTRADEDAMOUNT = "totalTradedAmount";

    public static final String FUNC_TOTALTRADEDNOTIONAL = "totalTradedNotional";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_USERQUOTES = "userQuotes";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DBOESpotMarket(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DBOESpotMarket(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DBOESpotMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DBOESpotMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BPS_UNIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BPS_UNIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> DBOE_NO_SWAP() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DBOE_NO_SWAP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORACLE_DOWN_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORACLE_DOWN_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_ORDER_VALIDITY_SEC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_ORDER_VALIDITY_SEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PRICE_SCALE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRICE_SCALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PX_BPS_SCALE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PX_BPS_SCALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PX_LMT_BPS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PX_LMT_BPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PX_LMT_BPS_PER_MIN() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PX_LMT_BPS_PER_MIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>> allQuotes(Boolean param0, BigInteger param1, BigInteger param2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLQUOTES, 
                Arrays.<Type>asList(new Bool(param0),
                new Uint256(param1),
                new Uint256(param2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> askSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASKSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASETOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> baseTokenOracle() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASETOKENORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> bidSpreadsBps(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BIDSPREADSBPS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cleanOb() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEANOB, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> config() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> decimalFactor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALFACTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getFixedSpreads(Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFIXEDSPREADS, 
                Arrays.<Type>asList(new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getObSpecs() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOBSPECS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> initRefPx() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITREFPX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> lastTxns(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LASTTXNS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minQuoteTokenQty() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINQUOTETOKENQTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> obDepth(Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBDEPTH, 
                Arrays.<Type>asList(new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> priceOracleEnable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRICEORACLEENABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> quoteToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUOTETOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> quoteTokenOracle() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUOTETOKENORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<Boolean, BigInteger, BigInteger, BigInteger>> refInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Boolean, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<Boolean, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<Boolean, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Boolean, BigInteger, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toCancel(Boolean buySell, BigInteger priceLevel, BigInteger utcT) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOCANCEL, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(priceLevel),
                new Uint256(utcT)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toPrice(Boolean buySell, BigInteger amount, BigInteger priceLevel, BigInteger validPeriodSecs, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOPRICE, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(amount),
                new Uint256(priceLevel),
                new Uint256(validPeriodSecs),
                new Address(_beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTrade(Boolean buySell, BigInteger notional, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADE, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(notional),
                new Address(_beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toTradeByQty(Boolean buySell, BigInteger amount, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTRADEBYQTY, 
                Arrays.<Type>asList(new Bool(buySell),
                new Uint256(amount),
                new Address(_beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalTradeCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTradedAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADEDAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalTradedNotional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALTRADEDNOTIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>> userQuotes(String addr, Boolean buySell) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERQUOTES, 
                Arrays.<Type>asList(new Address(addr),
                new Bool(buySell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static DBOESpotMarket load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOESpotMarket(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DBOESpotMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DBOESpotMarket(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DBOESpotMarket load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DBOESpotMarket(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DBOESpotMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DBOESpotMarket(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DBOESpotMarket> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _configAddr, String _quoteToken, String _baseToken, String _qPxOracle, String _bPxOracle, BigInteger _minQTokenQty, BigInteger _initRefPx) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_configAddr),
                new Address(_quoteToken),
                new Address(_baseToken),
                new Address(_qPxOracle),
                new Address(_bPxOracle),
                new Uint256(_minQTokenQty),
                new Uint256(_initRefPx)));
        return deployRemoteCall(DBOESpotMarket.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
