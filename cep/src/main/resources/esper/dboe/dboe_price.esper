module com.ngontro86.server.dboe_price;

uses com.ngontro86.server.dboe_analytic;

create schema dboe_dsp_event as (
    chain string,
    instr_id string,
    currency string,
    dsp double
);

create window DboeDspWin.std:unique(chain, instr_id, currency) as dboe_dsp_event;
@Name('DboeDspWin') insert into DboeDspWin select * from dboe_dsp_event;

create schema dboe_fsp_event as (
    chain string,
    underlying string,
    expiry int,
    option_factory_address string,
    fsp long,
    in_timestamp long
);

create window DboeFspWin.std:unique(chain, underlying, expiry) as dboe_fsp_event;
@Name('DboeFspWin') insert into DboeFspWin select * from dboe_fsp_event;

create schema DboeOptionFspEvent as (
    chain string,
    instr_id string,
    fsp double,
    in_timestamp long
);

create window DboeOptionFspWin.std:unique(chain, instr_id) as DboeOptionFspEvent;
@Name('DboeOptionFspWin') insert into DboeOptionFspWin select * from DboeOptionFspEvent;

insert into DboeOptionFspEvent
select
    i.chain as chain,
    i.instr_id as instr_id,
    case
        when i.kind = 'Call'
        then Math.min(i.cond_strike - i.strike, Math.max(0, f.fsp/i.underlying_px_scale/100000000.0 - i.strike))
        else Math.min(i.strike - i.cond_strike, Math.max(0, 1.0* i.strike - f.fsp/i.underlying_px_scale/100000000.0)) end as fsp,
    f.in_timestamp as in_timestamp
from DboeFspWin f
inner join DboeAllOptionsWin i on f.chain = i.chain and f.underlying = i.underlying and f.expiry = i.expiry;

create schema DboePriceEvent as (
    chain string,
    instr_id string,
    currency string,
    bid double,
    ask double,
    bid_size double,
    ask_size double,
    in_timestamp long
);

create window DboePriceWin.win:time(1800 sec).std:unique(chain, instr_id, currency) as DboePriceEvent;
@Name('DboePriceWin') insert into DboePriceWin select * from DboePriceEvent(instr_id is not null);

create schema dboe_prev_ref_event as (
    chain string,
    instr_id string,
    currency string,
    ref_price double,
    in_timestamp long
);

create window DboePrevRefWin.std:unique(chain, instr_id, currency) as dboe_prev_ref_event;
@Name('DboePrevRefWin') insert into DboePrevRefWin select * from dboe_prev_ref_event;

create schema DboeRefStatEvent as (
    chain string,
    instr_id string,
    currency string,
    ref_price double,
    prev_ref_price double,
    price_change_pct double,
    in_timestamp long
);

create window DboeRefStatsWin.std:unique(chain, instr_id, currency) as DboeRefStatEvent;
@Name('DboeRefStatsWin') insert into DboeRefStatsWin select * from DboeRefStatEvent;

create schema DboeSpotEvent as (
    underlying string,
    spot double,
    in_timestamp long
);

create window DboeSpotWin.std:unique(underlying) as DboeSpotEvent;
@Name('DboeSpotWin') insert into DboeSpotWin select * from DboeSpotEvent;

create schema DboeImpliedVolEvent as (
    instr_id string,
    bid_iv double,
    ask_iv double,
    ref_iv double,
    in_timestamp long
);

create window DboeImpliedVolWin.win:time(900 sec).std:unique(instr_id) as DboeImpliedVolEvent;
@Name('DboeImpliedVolWin') insert into DboeImpliedVolWin select * from DboeImpliedVolEvent;

create schema DboeOptionGreekEvent as (
    instr_id string,
    timeToExpiry double,
    vol double,
    atm_price double,
    delta double,
    vega double,
    gamma double,
    theta double,
    in_timestamp long
);

create window DboeOptionGreekWin.std:unique(instr_id) as DboeOptionGreekEvent;
@Name('DboeOptionGreekWin') insert into DboeOptionGreekWin select * from DboeOptionGreekEvent;

insert into DboeVolSurfaceEvent
select
    i.underlying as underlying,
    i.expiry as expiry,
    i.kind as kind,
    t.time_to_expiry as timeToExpiry,
    Math.log(i.strike/s.spot) as moneyness,
    v.ref_iv as vol,
    s.spot as atm_price,
    i.strike as strike,
    v.in_timestamp as in_timestamp
from DboeImpliedVolWin v
inner join DboeOptionInstrWin i on v.instr_id = i.instr_id
inner join DboeOptionTimeToExpiryWin(time_to_expiry>0) t on i.instr_id = t.instr_id
inner join DboeSpotWin s on i.underlying = s.underlying;

@Name('Entry Price Estimation')
insert into DboeEntryPxEvent
select
    p.chain as chain,
    p.wallet_id as wallet_id,
    p.instr_id as instr_id,
    p.currency as currency,
    pos,
    pos_val,
    case when p.pos = b.balance then p.avg_px
         when b.balance = 0.0 or m.bid is null or m.ask is null then p.avg_px
         else (p.pos_val + (b.balance - p.pos) * (case when b.balance > p.pos then m.ask else m.bid end)) / b.balance
         end as avg_px,
    case when p.pos = b.balance then 0 else 1 end as estimated
from DboeWalletPositionWin p
inner join DboeLatestHolderBalanceWin b on p.chain = b.chain and p.instr_id = b.instr_id and p.wallet_id = b.wallet
left outer join DboePriceWin m on p.chain = m.chain and p.instr_id = m.instr_id;



