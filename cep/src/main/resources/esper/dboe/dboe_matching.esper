module com.ngontro86.server.dboe_matching;

uses com.ngontro86.server.dboe_fee;

create schema DboeMatchEvent as (
    instr_id string,
    bid_wallet_id string,
    ask_wallet_id string,
    bid_ex_order_id string,
    ask_ex_order_id string,
    matched_amount double,
    matched_price double,
    side_filled int,
    aggressor int
);

create window DboeMatchWin.std:unique(instr_id, bid_wallet_id, ask_wallet_id, bid_ex_order_id, ask_ex_order_id) as DboeMatchEvent;
@Name('DboeMatchWin') insert into DboeMatchWin select * from DboeMatchEvent;

@Name('MATCHED STATUS')
insert into DboeClearStatusEvent
select
    instr_id,
    bid_wallet_id,
    ask_wallet_id,
    bid_ex_order_id,
    ask_ex_order_id,
    'MATCHED' as clear_status,
    'Centralised Matching' as reason,
    current_timestamp() as in_timestamp
from DboeMatchWin;

create schema DboeSignedMatchEvent as (
    instr_id string,

    bid_wallet_address string,
    bid_ex_order_id string,
    bid_order_type string,
    bid_orig_amount double,
    bid_orig_notional double,
    bid_orig_price double,
    bid_order_hash string,
    bid_txn_sig string,

    ask_wallet_address string,
    ask_ex_order_id string,
    ask_order_type string,
    ask_orig_amount double,
    ask_orig_notional double,
    ask_orig_price double,
    ask_order_hash string,
    ask_txn_sig string,

    match_id string,
    matched_amount double,
    matched_price double,
    price_scale int,
    side_filled int,
    aggressor int,
    maker_fee double,
    maker_min_fee double,
    taker_fee double,
    taker_min_fee double,
    expiry_timestamp long,
    in_timestamp long
);
create window DboeSignedMatchWin.std:firstunique(instr_id, bid_wallet_address, ask_wallet_address, match_id) as DboeSignedMatchEvent;
@Name('DboeSignedMatchWin') insert into DboeSignedMatchWin select * from DboeSignedMatchEvent;

@Name('Sign Match Upon Passing to Blockchain')
insert into DboeSignedMatchEvent
select
    m.instr_id as instr_id,
    bid_ex_order_id ||'-'|| ask_ex_order_id as match_id,

    bid_wallet_id as bid_wallet_address,
    bid_ex_order_id,
    b.order_type as bid_order_type,
    b.amount as bid_orig_amount,
    cast(u.option_price_scale * b.notional, int) as bid_orig_notional,
    cast(u.option_price_scale * b.price, int) as bid_orig_price,
    b.order_hash as bid_order_hash,
    b.txn_sig as bid_txn_sig,

    ask_wallet_id as ask_wallet_address,
    ask_ex_order_id,
    a.order_type as ask_order_type,
    a.amount as ask_orig_amount,
    cast(u.option_price_scale * a.notional, int) as ask_orig_notional,
    cast(u.option_price_scale * a.price, int) as ask_orig_price,
    a.order_hash as ask_order_hash,
    a.txn_sig as ask_txn_sig,

    matched_amount,
    cast(u.option_price_scale * matched_price, int) as matched_price,
    u.option_price_scale as price_scale,
    side_filled,
    aggressor,
    coalesce(c1.fee, 5) as maker_fee,
    coalesce(c1.min_abs_fee, 1) as maker_min_fee,
    coalesce(c2.fee, 10) as taker_fee,
    coalesce(c2.min_abs_fee, 1) as taker_min_fee,
    current_timestamp() + 600000 as expiry_timestamp,
    current_timestamp() as in_timestamp
from DboeMatchWin m unidirectional
inner join DboeAckedOrderWin(buy_sell = 1) b on m.instr_id = b.instr_id and m.bid_wallet_id = b.wallet_id and m.bid_ex_order_id = b.ex_order_id
inner join DboeAckedOrderWin(buy_sell = 2) a on m.instr_id = a.instr_id and m.ask_wallet_id = a.wallet_id and m.ask_ex_order_id = a.ex_order_id
inner join DboeOptionInstrWin i on m.instr_id = i.instr_id
inner join DboeUnderlyingMarketWin u on i.underlying  = u.underlying
inner join DboeCfScheduleWin c1 on i.underlying = c1.underlying
inner join DboeCfScheduleWin c2 on i.underlying = c2.underlying
where m.aggressor = c1.maker_taker and m.aggressor <> c2.maker_taker;
