module com.ngontro86.server.dboe_spot_onchain_clob;

create schema dboe_spot_dashboard_address_event as (
    chain string,
    dashboard_address string
);

create window DboeSpotDashboardAddressWin.win:time(900 sec).std:unique(chain, dashboard_address) as dboe_spot_dashboard_address_event;
@Name('DboeSpotDashboardAddressWin') insert into DboeSpotDashboardAddressWin select * from dboe_spot_dashboard_address_event;

create schema DboeSpotMarketEvent as (
    quote_token string,
    base_token string,
    chain string,
    address string
);

create window DboeSpotMarketWin.std:unique(chain, quote_token, base_token) as DboeSpotMarketEvent;
@Name('DboeSpotMarketWin') insert into DboeSpotMarketWin select * from DboeSpotMarketEvent;

create schema DboeSpotFixedSpreadEvent as (
    chain string,
    address string,
    buy_sell int,
    price_level int,
    fixed_spread_bps int
);

create window DboeSpotFixedSpreadWin.std:unique(chain, address, buy_sell, price_level) as DboeSpotFixedSpreadEvent;
@Name('DboeSpotFixedSpreadWin') insert into DboeSpotFixedSpreadWin select * from DboeSpotFixedSpreadEvent;

create schema DboeSpotClobSpecsEvent as (
    address string,
    chain string,
    num_px_level int,
    maker_fee_bps int,
    taker_fee_bps int,
    max_order_validity_sec int,
    min_lmt_order_notional int
);

create window DboeSpotClobSpecsWin.std:unique(chain, address) as DboeSpotClobSpecsEvent;
@Name('DboeSpotClobSpecsWin') insert into DboeSpotClobSpecsWin select * from DboeSpotClobSpecsEvent;

create schema DboeSpotQuoteEvent as (
    chain string,
    address string,
    buy_sell int,
    price_level int,
    amount long,
    in_timestamp long
);

create window DboeSpotQuoteWin.std:unique(chain, address, buy_sell, price_level) as DboeSpotQuoteEvent;
@Name('DboeSpotQuoteWin') insert into DboeSpotQuoteWin select * from DboeSpotQuoteEvent;

create schema DboeTokenDecimalEvent as (
    chain string,
    token_address string,
    decimal_factor long
);
create window DboeTokenDecimalWin.std:unique(chain, token_address) as DboeTokenDecimalEvent;
@Name('DboeTokenDecimalWin') insert into DboeTokenDecimalWin select * from DboeTokenDecimalEvent;


create schema DboeSpotRefEvent as (
    chain string,
    address string,
    status int,
    ref_price int,
    px_scale int,
    ref_time long,
    in_timestamp long
);

create window DboeSpotRefWin.std:unique(chain, address) as DboeSpotRefEvent;
@Name('DboeSpotRefWin') insert into DboeSpotRefWin select * from DboeSpotRefEvent;

create schema DboeSpotOrderBookEvent as (
    chain string,
    address string,
    quote_token string,
    base_token string,
    buy_sell int,
    amount double,
    price double,
    price_level int,
    in_timestamp long
);

create window DboeSpotOrderBookWin.std:unique(chain, address, buy_sell, price_level) as DboeSpotOrderBookEvent;
@Name('DboeSpotOrderBookWin') insert into DboeSpotOrderBookWin select * from DboeSpotOrderBookEvent;

@Name('Spot On-chain CLOB Update')
insert into DboeSpotOrderBookEvent
select
    o.chain as chain,
    o.address as address,
    i.quote_token as quote_token,
    i.base_token as base_token,
    o.buy_sell as buy_sell,
    1.0 * amount/decimal_factor as amount,
    ref_price * (10000L + (case when o.buy_sell = 1 then -1L else 1L end) * s.fixed_spread_bps)/10000L/px_scale as price,
    o.price_level + 1 as price_level,
    max(o.in_timestamp, r.in_timestamp) as in_timestamp
from DboeSpotQuoteWin o
inner join DboeSpotMarketWin i on o.address = i.address and o.chain = i.chain
inner join DboeSpotRefWin r on i.address = r.address and i.chain = r.chain
inner join DboeTokenDecimalWin d on i.chain = d.chain and i.base_token = d.token_address
inner join DboeSpotFixedSpreadWin s on o.buy_sell = s.buy_sell and o.chain = s.chain and o.price_level = s.price_level and o.address = s.address;

