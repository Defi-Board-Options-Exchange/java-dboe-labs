module com.ngontro86.server.dboe_spot_onchain_clob;

create schema dboe_underlying_mapping_event as (
    chain string,
    token_symbol string,
    underlying string
);

create window DboeUnderlyingMappingWin.std:unique(chain, token_symbol, underlying) as dboe_underlying_mapping_event;
@Name('DboeUnderlyingMappingWin') insert into DboeUnderlyingMappingWin select * from dboe_underlying_mapping_event;

create schema dboe_spot_dashboard_address_event as (
    chain string,
    dashboard_address string
);

create schema dboe_spot_prev_ref_event as (
    chain string,
    address string,
    quote_token string,
    base_token string,
    ref_price double,
    delay string,
    in_timestamp long
);

create window DboeSpotPrevRefWin.std:unique(chain, quote_token, base_token) as dboe_spot_prev_ref_event;
@Name('DboeSpotPrevRefWin') insert into DboeSpotPrevRefWin select * from dboe_spot_prev_ref_event;


create window DboeSpotDashboardAddressWin.std:unique(chain, dashboard_address) as dboe_spot_dashboard_address_event;
@Name('DboeSpotDashboardAddressWin') insert into DboeSpotDashboardAddressWin select * from dboe_spot_dashboard_address_event;

create schema DboeSpotMarketEvent as (
    quote_token string,
    base_token string,
    quote_name string,
    base_name string,
    quote_decimal long,
    base_decimal long,
    chain string,
    address string
);

create window DboeSpotMarketWin.std:unique(chain, quote_token, base_token) as DboeSpotMarketEvent;
@Name('DboeSpotMarketWin') insert into DboeSpotMarketWin select * from DboeSpotMarketEvent;

create schema DboeSpotFixedSpreadEvent as (
    chain string,
    address string,
    buy_sell int,
    price_level int,
    fixed_spread_bps int
);

create window DboeSpotFixedSpreadWin.std:unique(chain, address, buy_sell, price_level) as DboeSpotFixedSpreadEvent;
@Name('DboeSpotFixedSpreadWin') insert into DboeSpotFixedSpreadWin select * from DboeSpotFixedSpreadEvent;

create schema DboeSpotClobSpecsEvent as (
    address string,
    chain string,
    num_px_level int,
    maker_fee_bps int,
    taker_fee_bps int,
    max_order_validity_sec int,
    min_lmt_order_notional int
);

create window DboeSpotClobSpecsWin.std:unique(chain, address) as DboeSpotClobSpecsEvent;
@Name('DboeSpotClobSpecsWin') insert into DboeSpotClobSpecsWin select * from DboeSpotClobSpecsEvent;

create schema DboeSpotQuoteEvent as (
    chain string,
    address string,
    buy_sell int,
    price_level int,
    amount long,
    in_timestamp long
);

create window DboeSpotQuoteWin.std:unique(chain, address, buy_sell, price_level) as DboeSpotQuoteEvent;
@Name('DboeSpotQuoteWin') insert into DboeSpotQuoteWin select * from DboeSpotQuoteEvent;

create schema DboeSpotRefEvent as (
    chain string,
    address string,
    status int,
    ref_price int,
    px_scale int,
    ref_time long,
    in_timestamp long
);

create window DboeSpotRefWin.std:unique(chain, address) as DboeSpotRefEvent;
@Name('DboeSpotRefWin') insert into DboeSpotRefWin select * from DboeSpotRefEvent;

create schema DboeSpotMarketOverviewEvent as (
    quote_token string,
    base_token string,
    quote_name string,
    base_name string,
    quote_underlying string,
    base_underlying string,
    quote_decimal long,
    base_decimal long,
    chain string,
    address string,
    ref_price double,
    prev_ref_price double,
    price_change_pct double,
    delay string,
    in_timestamp long
);

create window DboeSpotMarketOverviewWin.std:unique(chain, quote_token, base_token) as DboeSpotMarketOverviewEvent;
@Name('DboeSpotMarketOverviewWin') insert into DboeSpotMarketOverviewWin select * from DboeSpotMarketOverviewEvent;

@Name('DBOE Spot and Ref Price')
insert into DboeSpotMarketOverviewEvent
select
    s.quote_token as quote_token,
    s.base_token as base_token,
    s.quote_name as quote_name,
    s.base_name as base_name,
    coalesce(m1.underlying, s.quote_name) as quote_underlying,
    coalesce(m2.underlying, s.base_name) as base_underlying,
    s.quote_decimal as quote_decimal,
    s.base_decimal as base_decimal,
    s.chain as chain,
    s.address as address,
    cr.ref_price/cr.px_scale as ref_price,
    r.ref_price as prev_ref_price,
    case when r.ref_price > 0 then 100.0 * (cr.ref_price/cr.px_scale/r.ref_price - 1.0) else Double.NaN end as price_change_pct,
    r.delay as delay,
    current_timestamp() as in_timestamp
from DboeSpotMarketWin s
left outer join DboeUnderlyingMappingWin m1 on s.quote_name = m1.token_symbol and s.chain = m1.chain
left outer join DboeUnderlyingMappingWin m2 on s.base_name = m2.token_symbol and s.chain = m2.chain
left outer join DboeSpotPrevRefWin r on s.chain = r.chain and s.quote_token = r.quote_token and s.base_token = r.base_token
left outer join DboeSpotRefWin cr on s.chain = cr.chain and s.address = cr.address;

create schema DboeSpotOrderBookEvent as (
    chain string,
    address string,
    quote_token string,
    base_token string,
    quote_name string,
    base_name string,
    buy_sell int,
    amount double,
    price double,
    price_level int,
    in_timestamp long
);

create window DboeSpotOrderBookWin.std:unique(chain, address, buy_sell, price_level) as DboeSpotOrderBookEvent;
@Name('DboeSpotOrderBookWin') insert into DboeSpotOrderBookWin select * from DboeSpotOrderBookEvent;

@Name('Spot On-chain CLOB Update')
insert into DboeSpotOrderBookEvent
select
    o.chain as chain,
    o.address as address,
    i.quote_token as quote_token,
    i.base_token as base_token,
    base_name,
    quote_name,
    o.buy_sell as buy_sell,
    1.0 * amount/base_decimal as amount,
    ref_price * (10000L + (case when o.buy_sell = 1 then -1L else 1L end) * s.fixed_spread_bps)/10000L/px_scale as price,
    o.price_level + 1 as price_level,
    max(o.in_timestamp, r.in_timestamp) as in_timestamp
from DboeSpotQuoteWin o
inner join DboeSpotMarketWin i on o.address = i.address and o.chain = i.chain
inner join DboeSpotRefWin r on i.address = r.address and i.chain = r.chain
inner join DboeSpotFixedSpreadWin s on o.buy_sell = s.buy_sell and o.chain = s.chain and o.price_level = s.price_level and o.address = s.address;

create schema DboeAggrSpotOrderBookEvent as (
    chain string,
    address string,
    quote_token string,
    base_token string,
    quote_name string,
    base_name string,
    buy_sell int,
    amount double,
    notional double,
    price double,
    price_level int,
    in_timestamp long
);

create window DboeAggrSpotOrderBookWin.std:unique(chain, address, buy_sell, price_level) as DboeAggrSpotOrderBookEvent;
@Name('DboeAggrSpotOrderBookWin') insert into DboeAggrSpotOrderBookWin select * from DboeAggrSpotOrderBookEvent;

@Name('Aggr Spot OB')
insert into DboeAggrSpotOrderBookEvent
select
    i.chain as chain,
    i.address as address,
    i.quote_token as quote_token,
    i.base_token as base_token,
    i.quote_name as quote_name,
    i.base_name as base_name,
    i.buy_sell as buy_sell,
    sum(p.amount) as amount,
    sum(p.amount*p.price) as notional,
    i.price as price,
    i.price_level as price_level,
    max(p.in_timestamp) as in_timestamp
from DboeSpotOrderBookWin i
inner join DboeSpotOrderBookWin p on i.chain = p.chain and i.address = p.address and i.buy_sell = p.buy_sell
where i.price_level >= p.price_level
group by i.chain, i.address, i.quote_token, i.base_token, i.quote_name, i.base_name, i.buy_sell, i.price, i.price_level;