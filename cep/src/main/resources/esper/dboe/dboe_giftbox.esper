module com.ngontro86.server.dboe_giftbox;

create schema dboe_wallet_trades_invites_event as (
    Address string,
    numOfTrades int,
    numOfInvitations int,
    tradedValue double
);

create window DboeWalletTradesInvitesWin.std:unique(Address) as dboe_wallet_trades_invites_event;
@Name('DboeWalletTradesInvitesWin') insert into DboeWalletTradesInvitesWin select * from dboe_wallet_trades_invites_event;

create schema dboe_mysterious_gift_user_open_event as (
    date int,
    name string,
    wallet_id string,
    open_key string,
    reward double,
    status string,
    timestamp long
);

create window DboeMGUserOpenWin.std:unique(date, name, wallet_id, open_key) as dboe_mysterious_gift_user_open_event;
@Name('DboeMGUserOpenWin') insert into DboeMGUserOpenWin select * from dboe_mysterious_gift_user_open_event;

create schema dboe_mysterious_gift_config_event as (
    name string,
    type string,
    frequency string,
    condition string,
    max_recipient int,
    reward_token string,
    num_gift_box int,
    min_reward double,
    max_reward double,
    pool_size int,
    start_date int,
    end_date int,
    timestamp long
);

create window DboeMGConfigWin.std:unique(name, type) as dboe_mysterious_gift_config_event;
@Name('DboeMGConfigWin') insert into DboeMGConfigWin select * from dboe_mysterious_gift_config_event;

create schema dboe_date_event as (date int, in_timestamp long);
create window DboeDateWin.win:length(1) as dboe_date_event;
@Name('DBOEDateWin') insert into DboeDateWin select * from dboe_date_event;

insert into dboe_date_event
select
    current_timestamp().getYear() * 10000 + (1 + current_timestamp().getMonthOfYear()) * 100 + current_timestamp().getDayOfMonth() as date,
    current_timestamp as in_timestamp
from DboeMGConfigWin
output snapshot every 5 minutes;

create schema DboeMGUserTotalOpenEvent as (
    date int,
    wallet_id string,
    name string,
    frequency string,
    num_open int,
    total_reward double
);
create window DboeMGUserTotalOpenWin.std:unique(date, name, frequency, wallet_id) as DboeMGUserTotalOpenEvent;
@Name('DboeMGUserTotalOpenWin') insert into DboeMGUserTotalOpenWin select * from DboeMGUserTotalOpenEvent;

@Name('Total Daily Latest Opens')
insert into DboeMGUserTotalOpenEvent
select
    o.date as date, o.name as name, o.wallet_id as wallet_id, c.frequency as frequency,
    cast(count(distinct o.open_key) as int) as num_open,
    sum(o.reward) as total_reward
from DboeMGUserOpenWin o
inner join DboeMGConfigWin(frequency='Daily') c on o.name = c.name
inner join DboeDateWin d on d.date = o.date
group by o.date, o.name, o.wallet_id;

@Name('Total non-Daily Open')
insert into DboeMGUserTotalOpenEvent
select
    0 as date, o.name as name, o.wallet_id as wallet_id, c.frequency as frequency,
    cast(count(distinct o.open_key) as int) as num_open,
    sum(o.reward) as total_reward
from DboeMGUserOpenWin o
inner join DboeMGConfigWin(frequency<>'Daily') c on o.name = c.name
group by o.name, o.wallet_id;

create schema DboeMGUserQuotaEvent as (
    name string,
    wallet_id string,
    quota int
);

create window DboeMGUserQuotaWin.std:unique(name, wallet_id) as DboeMGUserQuotaEvent;
@Name('DboeMGUserQuotaWin') insert into DboeMGUserQuotaWin select * from DboeMGUserQuotaEvent;

@Name('Gift-Quota')
insert into DboeMGUserQuotaEvent
select
     c.name as name,
     w.Address as wallet_id,
     case
        when c.frequency = 'Daily' and c.condition = 'Login' then c.num_gift_box
        when c.frequency = 'OneTime' and c.condition = 'FirstTrade' then (case when w.numOfTrades > 0 then c.num_gift_box else 0 end)
        when c.frequency = 'OneTime' and c.condition = 'InvitationCount' then w.numOfInvitations * c.num_gift_box
        when c.frequency = 'OneTime' and c.condition = 'TradedValue' then cast(Math.round(w.tradedValue/100) * c.num_gift_box as int)
        else 0
     end as quota
from DboeWalletTradesInvitesWin w
inner join DboeMGConfigWin c;

create schema DboeMGUserQuotaLeftEvent as (
    name string,
    wallet_id string,
    quota int
);

create window DboeMGUserQuotaLeftWin.std:unique(name, wallet_id) as DboeMGUserQuotaLeftEvent;
@Name('DboeMGUserQuotaLeftWin') insert into DboeMGUserQuotaLeftWin select * from DboeMGUserQuotaLeftEvent;

@Name('Daily-Gift-Quota-Left-Timer')
insert into DboeMGUserQuotaLeftEvent
select
    q.name as name,
    q.wallet_id as wallet_id,
    q.quota - coalesce(o.num_open, 0) as quota
from DboeMGUserQuotaWin q
inner join DboeMGConfigWin(frequency='Daily') c on q.name = c.name
left outer join DboeMGUserTotalOpenWin(frequency='Daily') o on o.name = q.name and o.wallet_id = q.wallet_id
left outer join DboeDateWin d on o.date = d.date;

@Name('Other Gift-Quota-Left')
insert into DboeMGUserQuotaLeftEvent
select
    q.name as name,
    q.wallet_id as wallet_id,
    q.quota - coalesce(o.num_open, 0) as quota
from DboeMGUserQuotaWin q
inner join DboeMGConfigWin(frequency<>'Daily') c on q.name = c.name
left outer join DboeMGUserTotalOpenWin(frequency<>'Daily') o on o.name = q.name and o.wallet_id = q.wallet_id;