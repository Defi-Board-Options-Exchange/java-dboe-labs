module com.ngontro86.server.dboe_clearing;

uses com.ngontro86.server.dboe_matching;

create schema DboeClearStatusEvent as (
    instr_id string,
    bid_wallet_id string,
    ask_wallet_id string,
    bid_ex_order_id string,
    ask_ex_order_id string,
    clear_status string,
    reason string,
    in_timestamp long
);
create window DboeClearStatusWin.std:unique(instr_id, bid_wallet_id, ask_wallet_id, bid_ex_order_id, ask_ex_order_id) as DboeClearStatusEvent;
@Name('DboeClearStatusWin') insert into DboeClearStatusWin select * from DboeClearStatusEvent;

create schema DboeFillEvent as (
    wallet_id string,
    instr_id string,
    buy_sell int,
    aggressor int,
    ex_order_id string,
    ex_fill_id string,
    side_filled int,
    filled_amount double,
    filled_price double,
    fee double,
    clear_status string,
    reason string,
    in_timestamp long
);

create schema DboeAggregateFillEvent as (
    wallet_id string,
    instr_id string,
    buy_sell int,
    ex_order_id string,
    filled_amount double,
    avg_filled_price double,
    fee double,
    in_timestamp long
);

create window DboeFillWin.std:unique(wallet_id, instr_id, buy_sell, ex_fill_id) as DboeFillEvent;
@Name('DboeFillWin') insert into DboeFillWin select * from DboeFillEvent;

create window DboeAggregateFillWin.std:unique(wallet_id, instr_id, ex_order_id, buy_sell) as DboeAggregateFillEvent;
@Name('DboeAggregateFillWin') insert into DboeAggregateFillWin select * from DboeAggregateFillEvent;

insert into DboeAggregateFillEvent
select
    wallet_id,
    instr_id,
    buy_sell,
    ex_order_id,
    sum(filled_amount) as filled_amount,
    sum(filled_amount*filled_price)/sum(filled_amount) as avg_filled_price,
    max(in_timestamp) as in_timestamp
from DboeFillWin
group by wallet_id, instr_id, buy_sell, ex_order_id;

@Name('Fill-BID-SIDE')
insert into DboeFillEvent
select
    m.bid_wallet_id as wallet_id,
    m.instr_id as instr_id,
    1 as buy_sell,
    aggressor,
    m.bid_ex_order_id as ex_order_id,
    m.bid_ex_order_id || m.ask_ex_order_id as ex_fill_id,
    side_filled,
    matched_amount as filled_amount,
    matched_price as filled_price,
    max(coalesce(c.min_abs_fee, 1.0), coalesce(c.fee, 0.00010) * matched_amount * matched_price * i.multiplier) as fee,
    s.clear_status as clear_status,
    s.reason as reason,
    current_timestamp() as in_timestamp
from DboeMatchWin m
inner join DboeOptionInstrWin i on m.instr_id = i.instr_id
inner join DboeClearStatusWin s unidirectional on m.instr_id = s.instr_id and m.bid_wallet_id = s.bid_wallet_id and m.ask_wallet_id = s.ask_wallet_id and m.bid_ex_order_id = s.bid_ex_order_id and m.ask_ex_order_id = s.ask_ex_order_id
inner join DboeCfScheduleWin c on i.underlying = c.underlying
where m.aggressor <> c.maker_taker;

@Name('Fill-ASK-SIDE')
insert into DboeFillEvent
select
    m.ask_wallet_id as wallet_id,
    m.instr_id as instr_id,
    2 as buy_sell,
    aggressor,
    m.ask_ex_order_id as ex_order_id,
    m.bid_ex_order_id || m.ask_ex_order_id as ex_fill_id,
    side_filled,
    matched_amount as filled_amount,
    matched_price as filled_price,
    max(coalesce(c.min_abs_fee, 1.0), coalesce(c.fee, 0.00010) * matched_amount * matched_price * i.multiplier) as fee,
    s.clear_status as clear_status,
    s.reason as reason,
    current_timestamp() as in_timestamp
from DboeMatchWin m
inner join DboeOptionInstrWin i on m.instr_id = i.instr_id
inner join DboeClearStatusWin s unidirectional on m.instr_id = s.instr_id and m.bid_wallet_id = s.bid_wallet_id and m.ask_wallet_id = s.ask_wallet_id and m.bid_ex_order_id = s.bid_ex_order_id and m.ask_ex_order_id = s.ask_ex_order_id
inner join DboeCfScheduleWin c on i.underlying = c.underlying
where m.aggressor = c.maker_taker;